name: Test Suite

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: [1.25]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: ./test-ci.sh

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Running CI Test Suite..."
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run ./...
        go test -race -cover -coverprofile=coverage.out ./internal/...
        go build -o bin/drun.exe ./cmd/drun
        ./bin/drun.exe --version
        echo "CI tests passed!"

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.25

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.25

    - name: Build binary (Unix)
      if: runner.os != 'Windows'
      run: |
        go build -ldflags "-X main.version=ci-build -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o bin/drun ./cmd/drun
        ./bin/drun --version

    - name: Build binary (Windows)
      if: runner.os == 'Windows'
      run: |
        go build -ldflags "-X main.version=ci-build -X main.commit=${{ github.sha }} -X main.date=$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')" -o bin/drun.exe ./cmd/drun
        ./bin/drun.exe --version

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: drun-${{ runner.os }}
        path: bin/drun*
