version: 0.1

# Environment variables available to all recipes
env:
  PROJECT_NAME: "drun"
  GO_VERSION: "1.21"

# Variables for templating
vars:
  project_root: "."
  cmd_path: "./cmd/drun"
  coverage_file: "coverage.out"

# Reusable code snippets
snippets:
  check_go: |
    if ! command -v go &> /dev/null; then
        echo "❌ Go is not installed"
        exit 1
    fi
    echo "✅ Go $(go version | cut -d' ' -f3) found"

  check_golangci_lint: |
    if ! command -v golangci-lint &> /dev/null; then
        echo "⚠️  golangci-lint not found, installing..."
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    fi
    echo "✅ golangci-lint found"

recipes:
  # Development workflow recipes
  test:
    help: "Run all tests with coverage"
    run: |
      {{ snippet "check_go" }}
      {{ step "Running tests with coverage..." }}
      
      go test -v -race -coverprofile={{ .coverage_file }} ./...
      
      if [ $? -eq 0 ]; then
          {{ success "All tests passed!" }}
          
          # Show coverage summary
          {{ info "Coverage Summary:" }}
          go tool cover -func={{ .coverage_file }} | tail -1
      else
          {{ error "Tests failed!" }}
          exit 1
      fi

  test-unit:
    help: "Run unit tests only (fast)"
    run: |
      {{ snippet "check_go" }}
      {{ step "Running unit tests..." }}
      
      go test -v -short ./...

  test-coverage:
    help: "Generate and view test coverage report"
    deps: ["test"]
    run: |
      {{ step "Generating coverage report..." }}
      
      go tool cover -html={{ .coverage_file }} -o coverage.html
      {{ success "Coverage report generated: coverage.html" }}
      
      # Try to open in browser (works on macOS and Linux)
      if command -v open &> /dev/null; then
          open coverage.html
      elif command -v xdg-open &> /dev/null; then
          xdg-open coverage.html
      else
          {{ info "Open coverage.html in your browser to view the report" }}
      fi

  lint:
    help: "Run golangci-lint checks"
    run: |
      {{ snippet "check_golangci_lint" }}
      {{ step "Running linter..." }}
      
      golangci-lint run
      
      if [ $? -eq 0 ]; then
          {{ success "No linting issues found!" }}
      else
          {{ error "Linting issues found!" }}
          exit 1
      fi

  fmt:
    help: "Format Go code"
    run: |
      {{ snippet "check_go" }}
      {{ step "Formatting Go code..." }}
      
      go fmt ./...
      {{ success "Code formatted!" }}

  vet:
    help: "Run go vet"
    run: |
      {{ snippet "check_go" }}
      {{ step "Running go vet..." }}
      
      go vet ./...
      
      if [ $? -eq 0 ]; then
          {{ success "No vet issues found!" }}
      else
          {{ error "Vet issues found!" }}
          exit 1
      fi

  # Build recipes
  build:
    help: "Build the drun binary"
    run: |
      {{ snippet "check_go" }}
      {{ step "Building drun..." }}
      
      go build -o bin/drun {{ .cmd_path }}
      
      if [ $? -eq 0 ]; then
          {{ success "Build successful! Binary: bin/drun" }}
          {{ info "Binary info:" }}
          ls -lh bin/drun
          {{ info "Version:" }}
          ./bin/drun --version || echo "Version command not available"
      else
          {{ error "Build failed!" }}
          exit 1
      fi

  build-all:
    help: "Build binaries for all platforms"
    run: |
      {{ snippet "check_go" }}
      {{ step "Building for all platforms..." }}
      
      # Run the existing build script
      ./build.sh
      
      if [ $? -eq 0 ]; then
          {{ success "All builds successful!" }}
          {{ info "Built binaries:" }}
          ls -lh dist/
      else
          {{ error "Build failed!" }}
          exit 1
      fi

  # Quality assurance recipes
  check:
    help: "Run all quality checks (fmt, vet, lint, test)"
    deps: ["fmt", "vet", "lint", "test"]
    run: |
      {{ success "All quality checks passed!" }}
      {{ info "Your code is ready for commit!" }}

  ci:
    help: "Run CI pipeline (what runs in continuous integration)"
    run: |
      {{ step "Running CI pipeline..." }}
      
      # Run existing CI script
      ./test-ci.sh
      
      if [ $? -eq 0 ]; then
          {{ success "CI pipeline passed!" }}
      else
          {{ error "CI pipeline failed!" }}
          exit 1
      fi

  # Development helpers
  clean:
    help: "Clean build artifacts and temporary files"
    run: |
      {{ step "Cleaning up..." }}
      
      # Remove build artifacts
      rm -rf bin/ dist/
      rm -f {{ .coverage_file }} coverage.html
      
      # Clean Go module cache for this project
      go clean -cache -testcache -modcache
      
      {{ success "Cleanup complete!" }}

  deps:
    help: "Download and verify dependencies"
    run: |
      {{ snippet "check_go" }}
      {{ step "Managing dependencies..." }}
      
      {{ info "Downloading dependencies..." }}
      go mod download
      
      {{ info "Verifying dependencies..." }}
      go mod verify
      
      {{ info "Tidying go.mod..." }}
      go mod tidy
      
      {{ success "Dependencies updated!" }}

  install:
    help: "Install drun to $GOPATH/bin"
    deps: ["test"]
    run: |
      {{ snippet "check_go" }}
      {{ step "Installing drun..." }}
      
      go install {{ .cmd_path }}
      
      if [ $? -eq 0 ]; then
          {{ success "drun installed successfully!" }}
          {{ info "Make sure $GOPATH/bin is in your PATH" }}
          
          # Show installation location
          if command -v drun &> /dev/null; then
              {{ info "Installed at: $(which drun)" }}
              {{ info "Version: $(drun --version 2>/dev/null || echo 'Version command not available')" }}
          fi
      else
          {{ error "Installation failed!" }}
          exit 1
      fi

  # Completion testing
  test-completion:
    help: "Test tab completion functionality"
    run: |
      {{ step "Testing completion functionality..." }}
      
      # Build first to ensure we have the latest binary
      go build -o bin/drun {{ .cmd_path }}
      
      {{ info "Generating completion script..." }}
      ./bin/drun completion bash > /tmp/drun_completion_test.bash
      
      if [ $? -eq 0 ]; then
          {{ success "Completion script generated successfully!" }}
          {{ info "To test completion manually:" }}
          echo "   source /tmp/drun_completion_test.bash"
          echo "   drun <TAB><TAB>"
      else
          {{ error "Completion script generation failed!" }}
          exit 1
      fi
      
      # Clean up
      rm -f /tmp/drun_completion_test.bash

  # Development workflow
  dev:
    help: "Quick development check (fmt + test-unit)"
    deps: ["fmt", "test-unit"]
    run: |
      {{ success "Quick dev check complete!" }}

  release-check:
    help: "Full release readiness check"
    deps: ["clean", "deps", "check", "build-all"]
    run: |
      {{ success "Release readiness check complete!" }}
      {{ info "Ready for release!" }}
