# Python Project Example
# Usage: drun -f examples/python-project.yml <recipe>

version: 1.0

vars:
  python_version: "3.11"
  app_name: "myapp"
  venv_name: ".venv"

env:
  PYTHONPATH: "src"
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUNBUFFERED: "1"

snippets:
  activate_venv: |
    if [ ! -d "{{ .venv_name }}" ]; then
      echo "Creating virtual environment..."
      python{{ .python_version }} -m venv {{ .venv_name }}
    fi
    source {{ .venv_name }}/bin/activate

  check_python: |
    if ! command -v python{{ .python_version }} &> /dev/null; then
      echo "‚ùå Python {{ .python_version }} is not installed"
      exit 1
    fi

recipes:
  # Environment setup
  setup:
    help: "Set up development environment"
    run: |
      {{ snippet "check_python" }}
      {{ snippet "activate_venv" }}
      echo "Installing dependencies..."
      pip install --upgrade pip
      pip install -r requirements.txt
      {{ if fileExists "requirements-dev.txt" }}
      pip install -r requirements-dev.txt
      {{ end }}
      echo "‚úÖ Environment setup complete"

  # Development
  run:
    help: "Run the application"
    positionals:
      - name: args
        variadic: true
    run: |
      {{ snippet "activate_venv" }}
      python -m {{ .app_name }} {{ range .args }}{{ . }} {{ end }}

  dev:
    help: "Run in development mode with auto-reload"
    run: |
      {{ snippet "activate_venv" }}
      watchmedo auto-restart --patterns="*.py" --recursive -- python -m {{ .app_name }}

  # Testing
  test:
    help: "Run tests"
    flags:
      coverage:
        type: bool
        default: false
      verbose:
        type: bool
        default: false
      pattern:
        type: string
        default: ""
    run: |
      {{ snippet "activate_venv" }}
      {{ if .coverage }}
      echo "Running tests with coverage..."
      pytest --cov={{ .app_name }} --cov-report=html --cov-report=term
      {{ else }}
      echo "Running tests..."
      pytest {{ if .verbose }}-v{{ end }} {{ if .pattern }}-k "{{ .pattern }}"{{ end }}
      {{ end }}

  test-watch:
    help: "Run tests in watch mode"
    run: |
      {{ snippet "activate_venv" }}
      ptw -- --testmon

  # Code quality
  lint:
    help: "Run linting"
    flags:
      fix:
        type: bool
        default: false
    run: |
      {{ snippet "activate_venv" }}
      echo "Running flake8..."
      flake8 src tests
      echo "Running pylint..."
      pylint src
      {{ if .fix }}
      echo "Running black (auto-fix)..."
      black src tests
      echo "Running isort (auto-fix)..."
      isort src tests
      {{ else }}
      echo "Running black (check only)..."
      black --check src tests
      echo "Running isort (check only)..."
      isort --check-only src tests
      {{ end }}

  format:
    help: "Format code"
    run: |
      {{ snippet "activate_venv" }}
      echo "Formatting with black..."
      black src tests
      echo "Sorting imports with isort..."
      isort src tests
      echo "‚úÖ Code formatted"

  type-check:
    help: "Run type checking"
    run: |
      {{ snippet "activate_venv" }}
      echo "Running mypy..."
      mypy src

  # Security
  security:
    help: "Run security checks"
    run: |
      {{ snippet "activate_venv" }}
      echo "Running bandit security scan..."
      bandit -r src
      echo "Checking for known vulnerabilities..."
      safety check

  # Building and packaging
  build:
    help: "Build package"
    deps: [clean]
    run: |
      {{ snippet "activate_venv" }}
      echo "Building package..."
      python -m build
      echo "‚úÖ Package built in dist/"

  install:
    help: "Install package locally"
    deps: [build]
    run: |
      {{ snippet "activate_venv" }}
      pip install -e .

  # Documentation
  docs:
    help: "Build documentation"
    run: |
      {{ snippet "activate_venv" }}
      echo "Building documentation..."
      cd docs && make html
      echo "‚úÖ Documentation built in docs/_build/html/"

  docs-serve:
    help: "Serve documentation locally"
    deps: [docs]
    run: |
      echo "Serving documentation at http://localhost:8000"
      cd docs/_build/html && python -m http.server 8000

  # Database operations (if applicable)
  migrate:
    help: "Run database migrations"
    run: |
      {{ snippet "activate_venv" }}
      echo "Running migrations..."
      alembic upgrade head

  migrate-create:
    help: "Create new migration"
    positionals:
      - name: message
        required: true
    run: |
      {{ snippet "activate_venv" }}
      echo "Creating migration: {{ .message }}"
      alembic revision --autogenerate -m "{{ .message }}"

  # Deployment
  deploy:
    help: "Deploy application"
    positionals:
      - name: environment
        required: true
        one_of: ["staging", "production"]
    deps: [test, lint, security]
    run: |
      echo "üöÄ Deploying to {{ .environment }}..."
      {{ if eq .environment "production" }}
      echo "‚ö†Ô∏è  PRODUCTION DEPLOYMENT"
      # Production deployment commands
      {{ else }}
      echo "üß™ Deploying to staging"
      # Staging deployment commands
      {{ end }}

  # Maintenance
  clean:
    help: "Clean build artifacts"
    run: |
      echo "Cleaning build artifacts..."
      rm -rf build/ dist/ *.egg-info/
      find . -type d -name __pycache__ -exec rm -rf {} +
      find . -type f -name "*.pyc" -delete
      echo "‚úÖ Clean complete"

  update-deps:
    help: "Update dependencies"
    run: |
      {{ snippet "activate_venv" }}
      echo "Updating dependencies..."
      pip-compile requirements.in
      {{ if fileExists "requirements-dev.in" }}
      pip-compile requirements-dev.in
      {{ end }}
      pip install -r requirements.txt
      echo "‚úÖ Dependencies updated"

  # All-in-one checks
  check:
    help: "Run all quality checks"
    deps: [lint, type-check, test, security]
    parallel_deps: true
    run: |
      echo "‚úÖ All checks passed!"
