# Elegant Symfony Version Check
# Shows clean template-based string checking

version: 1.0

env:
  PROJECT_NAME: "vibrez-api"

recipes:
  # Most elegant approach - everything in templates
  check-symfony:
    help: "Check Symfony version elegantly"
    prerun: |
      # Start services if needed and capture version
      {{ if not dockerCompose.IsRunning }}
          {{ dockerCompose }} up -d && sleep 5
      {{ end }}
      export SYMFONY_VERSION=$({{ dockerCompose }} exec -T php bash -c "frankenphp php-cli bin/console --version" 2>/dev/null || echo "not-found")
    run: |
        {{ step "Symfony Framework Detection" }}
        
        # Direct template-based checking - no shell conditionals needed!
        {{ if stringContains (env "SYMFONY_VERSION") "Symfony" }}
            {{ success "✅ Symfony detected!" }}
            echo "Version: {{ env "SYMFONY_VERSION" }}"
            
            {{ if stringContains (env "SYMFONY_VERSION") "6." }}
                {{ info "🚀 Modern Symfony 6.x - all features available" }}
            {{ else if stringContains (env "SYMFONY_VERSION") "5." }}
                {{ info "⚡ Symfony 5.x - stable and feature-rich" }}
            {{ else }}
                {{ info "📦 Symfony detected - version analysis needed" }}
            {{ end }}
            
        {{ else }}
            {{ error "❌ Symfony not found" }}
            {{ if stringContains (env "SYMFONY_VERSION") "not-found" }}
                {{ error "Could not execute console command - check PHP service" }}
            {{ else }}
                echo "Got: {{ env "SYMFONY_VERSION" }}"
            {{ end }}
            exit 1
        {{ end }}

  # Alternative: inline version capture (less clean but works)
  check-inline:
    help: "Check Symfony with inline capture"
    run: |
        {{ step "Quick Symfony Check" }}
        
        # Capture and check in one go
        SYMFONY_VER=$({{ dockerCompose }} exec -T php bash -c "frankenphp php-cli bin/console --version" 2>/dev/null || echo "failed")
        
        # Export for template use
        export SYMFONY_VER
        
        {{ if stringContains (env "SYMFONY_VER") "Symfony" }}
            {{ success "Symfony found!" }}
            echo "Version: {{ env "SYMFONY_VER" }}"
        {{ else }}
            {{ error "No Symfony detected" }}
            echo "Got: {{ env "SYMFONY_VER" }}"
        {{ end }}

  # Show different string matching patterns
  advanced-matching:
    help: "Advanced string matching examples"
    prerun: |
      export SYMFONY_VERSION=$({{ dockerCompose }} exec -T php bash -c "frankenphp php-cli bin/console --version" 2>/dev/null || echo "unknown")
    run: |
        {{ step "Advanced String Matching" }}
        
        # Multiple conditions with stringContains
        {{ if and (stringContains (env "SYMFONY_VERSION") "Symfony") (stringContains (env "SYMFONY_VERSION") "6.") }}
            {{ success "Perfect! Symfony 6.x detected" }}
        {{ else if or (stringContains (env "SYMFONY_VERSION") "symfony") (stringContains (env "SYMFONY_VERSION") "Symfony") }}
            {{ info "Symfony detected (any case)" }}
        {{ else if not (stringContains (env "SYMFONY_VERSION") "unknown") }}
            {{ warn "Got response but not Symfony: {{ env "SYMFONY_VERSION" }}" }}
        {{ else }}
            {{ error "No version information available" }}
        {{ end }}
        
        # Negation examples
        {{ if not (stringContains (env "SYMFONY_VERSION") "Symfony") }}
            {{ warn "This is NOT a Symfony project" }}
        {{ end }}
