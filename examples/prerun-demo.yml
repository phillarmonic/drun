# drun configuration file demonstrating prerun snippets
# Learn more: https://github.com/phillarmonic/drun

version: 0.1

# Environment variables available to all recipes
env:
  PROJECT_NAME: "demo-project"
  BUILD_DATE: '{{ now "2006-01-02T15:04:05Z" }}'

# Variables for templating
vars:
  project_name: "demo"
  version: "1.0.0"

# Reusable code snippets
snippets:
  check_requirements: |
    echo -e "${BLUE}üìã Checking requirements...${NC}"
    # Add your requirement checks here
    log_success "All requirements satisfied"
  
  setup_env: |
    echo -e "${CYAN}üåç Setting up environment for {{ .project_name }}${NC}"
    export PROJECT_ROOT="$(pwd)"
    export PROJECT_VERSION="{{ .version }}"

# Snippets that run before every recipe - perfect for common setup!
prerun:
  - '{{ snippet "check_requirements" }}'
  - '{{ snippet "setup_env" }}'
  - |
    # ANSI color codes - available in all recipes automatically
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    NC='\033[0m' # No Color
  - |
    # Common shell settings
    set -euo pipefail
  - |
    # Helper functions available to all recipes
    log_info() {
      echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
    }
    log_success() {
      echo -e "${GREEN}‚úÖ $1${NC}"
    }
    log_warning() {
      echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    }
    log_error() {
      echo -e "${RED}‚ùå $1${NC}"
    }

recipes:
  setup:
    help: "Set up the project environment"
    flags:
      clean:
        type: bool
        default: false
        help: "Clean existing setup first"
    run: |
      log_info "Setting up {{ .project_name }} v{{ .version }}"
      
      # Colors and helper functions are automatically available!
      echo -e "${GREEN}üöÄ Initializing project...${NC}"
      
      {{ if .flags.clean }}
      log_warning "Cleaning existing setup first"
      # rm -rf build/ dist/ node_modules/
      {{ end }}
      
      echo -e "${YELLOW}üì¶ Installing dependencies...${NC}"
      # Add your dependency installation commands here
      sleep 1
      
      {{ snippet "check_requirements" }}
      
      log_success "Setup completed successfully!"

  build:
    help: "Build the project"
    flags:
      release:
        type: bool
        default: false
        help: "Build for release (optimized)"
      target:
        type: string
        default: "development"
        help: "Build target (development, staging, production)"
    run: |
      log_info "Building {{ .project_name }} v{{ .version }} for {{ .flags.target }}"
      
      # Colors and helper functions are automatically available!
      echo -e "${GREEN}üèóÔ∏è Building project...${NC}"
      
      {{ if .flags.release }}
      log_info "Building optimized release version"
      echo -e "${BLUE}‚ö° Optimizing build...${NC}"
      {{ else }}
      log_info "Building development version"
      {{ end }}
      
      # Simulate build process
      echo -e "${CYAN}üî® Compiling...${NC}"
      sleep 1
      
      log_success "Build completed for {{ .flags.target }}!"

  test:
    help: "Run project tests"
    flags:
      coverage:
        type: bool
        default: false
        help: "Generate coverage report"
      verbose:
        type: bool
        default: false
        help: "Verbose test output"
    run: |
      log_info "Running test suite for {{ .project_name }}"
      
      {{ if .flags.verbose }}
      log_info "Running in verbose mode"
      {{ end }}
      
      echo -e "${CYAN}üß™ Running unit tests...${NC}"
      # Add your test commands here (go test, npm test, pytest, etc.)
      sleep 1
      
      echo -e "${CYAN}üß™ Running integration tests...${NC}"
      sleep 1
      
      {{ if .flags.coverage }}
      echo -e "${BLUE}üìä Generating coverage report...${NC}"
      sleep 1
      {{ end }}
      
      log_success "All tests passed!"

  lint:
    help: "Run code linting and formatting"
    flags:
      fix:
        type: bool
        default: false
        help: "Automatically fix issues where possible"
    run: |
      log_info "Running linters for {{ .project_name }}"
      
      echo -e "${PURPLE}üîç Checking code style...${NC}"
      # Add your linting commands here
      
      {{ if .flags.fix }}
      log_info "Auto-fixing issues where possible"
      echo -e "${YELLOW}üîß Applying fixes...${NC}"
      {{ end }}
      
      log_success "Code quality checks passed!"

  deploy:
    help: "Deploy the project"
    deps: ["build", "test", "lint"]
    flags:
      environment:
        type: string
        default: "staging"
        help: "Target environment (staging, production)"
      dry_run:
        type: bool
        default: false
        help: "Show what would be deployed without actually deploying"
    run: |
      log_info "Deploying {{ .project_name }} v{{ .version }} to {{ .flags.environment }}"
      
      {{ if .flags.dry_run }}
      log_warning "DRY RUN MODE - No actual deployment will occur"
      {{ end }}
      
      echo -e "${PURPLE}üöÄ Starting deployment...${NC}"
      
      # Add your deployment commands here
      echo -e "${BLUE}üì¶ Uploading artifacts...${NC}"
      sleep 1
      
      {{ if not .flags.dry_run }}
      echo -e "${GREEN}‚ú® Deployment successful!${NC}"
      log_success "{{ .project_name }} v{{ .version }} is now live on {{ .flags.environment }}!"
      {{ else }}
      log_info "Dry run completed - no changes made"
      {{ end }}

  clean:
    help: "Clean up build artifacts and temporary files"
    flags:
      all:
        type: bool
        default: false
        help: "Clean everything including dependencies"
    run: |
      log_warning "Cleaning up project artifacts..."
      
      echo -e "${YELLOW}üßπ Removing build files...${NC}"
      # rm -rf build/ dist/ target/ __pycache__/
      
      {{ if .flags.all }}
      log_warning "Cleaning dependencies too"
      echo -e "${YELLOW}üóëÔ∏è  Removing dependencies...${NC}"
      # rm -rf node_modules/ vendor/ .venv/
      {{ end }}
      
      log_success "Cleanup completed!"
