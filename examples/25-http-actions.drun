version: 2.0

project "api-client" version "1.0.0":
	set api_base to "https://jsonplaceholder.typicode.com"
	set auth_token to "demo-token-123"
	set timeout to "30s"

	before any task:
		info "Starting HTTP operations for {$globals.project} v{$globals.version}"

	after any task:
		info "HTTP operations completed"

task "health_check" means "Check API health status":
	get "{$globals.api_base}/posts/1"
	success "API health check passed!"

task "list_users" means "Get list of all users":
	get "{$globals.api_base}/users" accept json
	success "Users retrieved successfully!"

task "get_user" means "Get specific user by ID":
	requires $user_id from ["1", "2", "3", "4", "5"]

	get "{$globals.api_base}/users/{$user_id}" accept json
	success "User {$user_id} retrieved successfully!"

task "create_user" means "Create a new user":
	requires $name from ["John Doe", "Jane Smith", "Bob Johnson"]
	requires $email from ["john@example.com", "jane@example.com", "bob@example.com"]

	post "{$globals.api_base}/users" content type json with body "name={name}&email={email}"
	success "User {name} created successfully!"

task "update_user" means "Update existing user":
	requires $user_id from ["1", "2", "3"]
	requires $name from ["Updated John", "Updated Jane", "Updated Bob"]

	put "{$globals.api_base}/users/{$user_id}" content type json with body "name={name}"
	success "User {$user_id} updated successfully!"

task "delete_user" means "Delete a user":
	requires $user_id from ["1", "2", "3"]

	delete "{$globals.api_base}/users/{$user_id}"
	success "User {$user_id} deleted successfully!"

task "authenticated_request" means "Make authenticated API request":
	get "{$globals.api_base}/posts" with auth bearer "{auth_token}" accept json
	success "Authenticated request completed!"

task "custom_headers" means "Request with custom headers":
	get "{$globals.api_base}/posts" with header "X-Custom-Header: MyValue" accept json
	success "Request with custom headers completed!"

task "timeout_request" means "Request with timeout":
	get "{$globals.api_base}/posts" timeout "{timeout}" accept json
	success "Request with timeout completed!"

task "api_workflow" means "Complete API workflow":
	info "Starting comprehensive API workflow"
	get "{$globals.api_base}/users"
	post "{$globals.api_base}/users" content type json with body "name=Test User&email=test@example.com"
	put "{$globals.api_base}/users/1" content type json with body "name=Updated User"
	delete "{$globals.api_base}/users/1"
	success "API workflow completed successfully!"

task "health_and_data" means "Health check followed by data retrieval":
	depends on health_check

	info "Health check passed, retrieving data"
	get "{$globals.api_base}/posts" accept json
	get "{$globals.api_base}/users" accept json
	success "Health check and data retrieval completed!"

task "batch_operations" means "Multiple API operations in sequence":
	info "Performing batch API operations"
	get "{$globals.api_base}/posts/1" accept json
	get "{$globals.api_base}/posts/2" accept json
	get "{$globals.api_base}/posts/3" accept json
	success "Batch operations completed!"

task "error_handling_demo" means "Demonstrate error handling with HTTP":
	info "Testing error handling"
	get "{$globals.api_base}/posts/999" accept json
	success "Error handling demo completed!"

task "comprehensive_test" means "Comprehensive HTTP testing":
	depends on health_check

	info "Running comprehensive HTTP tests"
	get "{$globals.api_base}/posts" accept json
	post "{$globals.api_base}/posts" content type json with body "title=Test Post&body=Test Content"
	put "{$globals.api_base}/posts/1" content type json with body "title=Updated Post"
	patch "{$globals.api_base}/posts/1" content type json with body "title=Patched Post"
	delete "{$globals.api_base}/posts/1"
	success "Comprehensive HTTP testing completed!"

# Network Actions Examples
task "network_health_checks" means "Demonstrate network health checking":
	info "üè• Running network health checks"

	# Basic health check
	check health of service at "{$globals.api_base}/posts/1"

	# Health check with timeout
	check health of service at "https://httpbin.org/delay/2" timeout "5s"

	# Health check with retry
	check health of service at "https://httpbin.org/status/503" retry "3"

	success "Health checks completed!"

task "service_waiting" means "Demonstrate service waiting":
	info "‚è≥ Testing service waiting functionality"

	# Wait for service to be ready
	wait for service at "https://httpbin.org/get" to be ready

	# Wait with custom timeout
	wait for service at "https://httpbin.org/delay/1" to be ready timeout "10s"

	# Wait with custom retry interval
	wait for service at "https://httpbin.org/get" to be ready timeout "30s" retry "5s"

	success "Service waiting tests completed!"

task "port_connectivity" means "Demonstrate port connectivity testing":
	info "üîå Testing port connectivity"

	# Check if port is open
	check if port 80 is open on "google.com"
	check if port 443 is open on "github.com"

	# Test connection with timeout
	test connection to "google.com" on port 80 timeout "5s"

	# Check local ports
	check if port 22 is open on "localhost"

	success "Port connectivity tests completed!"

task "ping_tests" means "Demonstrate ping functionality":
	info "üèì Running ping tests"

	# Basic ping
	ping host "google.com"
	ping host "github.com"

	# Ping with timeout
	ping host "8.8.8.8" timeout "3s"

	success "Ping tests completed!"

task "advanced_network_demo" means "Advanced network operations showcase":
	info "üåê Running advanced network operations"

	# Health check with status code validation
	check health of service at "https://httpbin.org/status/200" expect "200"

	# Complex service waiting scenario
	info "Waiting for service with detailed monitoring..."
	wait for service at "https://httpbin.org/delay/1" to be ready timeout "15s" retry "2s"

	# Port scanning scenario
	info "Checking multiple ports..."
	check if port 80 is open on "google.com"
	check if port 443 is open on "google.com"
	test connection to "github.com" on port 22 timeout "3s"

	# Network diagnostics
	info "Running network diagnostics..."
	ping host "1.1.1.1" timeout "2s"

	success "Advanced network operations completed!"

task "real_world_deployment_check" means "Real-world deployment health checking":
	info "üöÄ Performing deployment health checks"

	# Check application health
	check health of service at "https://httpbin.org/get" timeout "10s"

	# Wait for database to be ready
	info "Checking database connectivity..."
	test connection to "localhost" on port 5432 timeout "5s"

	# Check external dependencies
	info "Verifying external service dependencies..."
	check health of service at "https://api.github.com" timeout "5s"
	ping host "8.8.8.8" timeout "3s"

	# Wait for all services to be ready
	info "Waiting for all services to be operational..."
	wait for service at "https://httpbin.org/get" to be ready timeout "30s"

	success "üéâ All deployment health checks passed!"

task "network_troubleshooting" means "Network troubleshooting toolkit":
	info "üîß Running network troubleshooting checks"

	# Basic connectivity
	ping host "google.com"
	ping host "8.8.8.8"

	# DNS resolution check
	ping host "dns.google"

	# Port accessibility
	check if port 80 is open on "google.com"
	check if port 443 is open on "google.com"
	test connection to "github.com" on port 22

	# Service health
	check health of service at "https://httpbin.org/get"
	check health of service at "https://api.github.com"

	success "Network troubleshooting completed!"
