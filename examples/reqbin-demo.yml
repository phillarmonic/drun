version: 1.0

# ReqBin Echo Service Demo
# Demonstrates drun's HTTP client capabilities using ReqBin's echo service
# ReqBin provides a simple HTTP testing service that echoes back requests

# HTTP endpoint definitions
http:
  reqbin:
    url: "https://reqbin.com/echo"
    headers:
      User-Agent: "drun/1.4 HTTP Demo"
      Accept: "*/*"
    timeout: 30s
    retry:
      max_attempts: 3
      backoff: "exponential"
      base_delay: 1s
      max_delay: 10s
    cache:
      ttl: 1m
    description: "ReqBin echo service for HTTP testing"

# Environment variables
env:
  DEMO_NAME: "drun HTTP Demo"
  DEMO_VERSION: "1.0"

recipes:
  # Test all HTTP methods
  test-all:
    help: "Test all HTTP methods and content types"
    run: |
      {{ step "Testing all HTTP methods with ReqBin echo service" }}
      
      {{ info "This demo shows drun's HTTP client capabilities" }}
      {{ info "Using ReqBin echo service: https://reqbin.com/echo" }}
      
      echo "Running all HTTP tests..."
      echo "=========================="
      
      # Run all individual tests
      drun test-get-json
      drun test-post-json
      drun test-head-json
      drun test-get-xml
      drun test-post-xml
      drun test-post-form
      drun test-direct-calls
      
      {{ success "All HTTP tests completed!" }}

  # GET JSON test
  test-get-json:
    help: "Test GET request with JSON response"
    run: |
      {{ step "Testing GET /echo/get/json" }}
      
      # Using predefined endpoint
      {{ $response := httpCallJSON "reqbin" (dict "url" "/get/json") }}
      
      {{ info "GET JSON Response received:" }}
      echo "Success: {{ $response.success }}"
      
      {{ if $response.success }}
      {{ success "GET JSON test passed" }}
      {{ else }}
      {{ error "GET JSON test failed" }}
      {{ end }}

  # POST JSON test
  test-post-json:
    help: "Test POST request with JSON data"
    run: |
      {{ step "Testing POST /echo/post/json" }}
      
      # Prepare JSON payload
      {{ $payload := dict 
           "name" (env "DEMO_NAME")
           "version" (env "DEMO_VERSION")
           "timestamp" (now "2006-01-02T15:04:05Z07:00")
           "method" "POST"
           "data" (dict "test" true "number" 42)
      }}
      
      # Make POST request with JSON
      {{ $response := httpPost "https://reqbin.com/echo/post/json" $payload }}
      
      {{ info "POST JSON Response:" }}
      echo "{{ $response }}"
      
      {{ success "POST JSON test completed" }}

  # HEAD request test
  test-head-json:
    help: "Test HEAD request (headers only)"
    run: |
      {{ step "Testing HEAD /echo/head/json" }}
      
      # HEAD requests return only headers, no body
      {{ $response := httpCallJSON "reqbin" (dict "url" "/head/json") }}
      
      {{ info "HEAD request completed (headers only)" }}
      {{ success "HEAD JSON test passed" }}

  # GET XML test
  test-get-xml:
    help: "Test GET request with XML response"
    run: |
      {{ step "Testing GET /echo/get/xml" }}
      
      # Request XML content
      {{ $options := dict 
           "headers" (dict "Accept" "application/xml")
           "url" "/get/xml"
      }}
      
      {{ $response := httpCall "reqbin" $options }}
      
      {{ info "GET XML Response received:" }}
      echo "{{ $response }}"
      
      {{ success "GET XML test completed" }}

  # POST XML test
  test-post-xml:
    help: "Test POST request with XML data"
    run: |
      {{ step "Testing POST /echo/post/xml" }}
      
      # XML payload as string
      {{ $timestamp := now "2006-01-02T15:04:05Z07:00" }}
      {{ $xmlData := printf "<?xml version=\"1.0\" encoding=\"UTF-8\"?><demo><name>drun HTTP Demo</name><version>1.0</version><timestamp>%s</timestamp><method>POST</method><test>true</test></demo>" $timestamp }}
      
      # POST with XML content type
      {{ $options := dict 
           "headers" (dict 
                "Content-Type" "application/xml"
                "Accept" "application/xml"
           )
           "body" $xmlData
      }}
      
      {{ $response := httpPost "https://reqbin.com/echo/post/xml" $xmlData $options }}
      
      {{ info "POST XML Response:" }}
      echo "{{ $response }}"
      
      {{ success "POST XML test completed" }}

  # POST Form test
  test-post-form:
    help: "Test POST request with form data"
    run: |
      {{ step "Testing POST /echo/post/form" }}
      
      # Form data
      {{ $formData := dict 
           "name" (env "DEMO_NAME")
           "version" (env "DEMO_VERSION")
           "timestamp" (now "2006-01-02T15:04:05Z07:00")
           "method" "POST"
           "test_field" "form data test"
           "number" "42"
      }}
      
      # Using direct HTTP call with form data
      {{ $response := httpPost "https://reqbin.com/echo/post/form" $formData }}
      
      {{ info "POST Form Response:" }}
      echo "{{ $response }}"
      
      {{ success "POST Form test completed" }}

  # Direct HTTP calls (without predefined endpoints)
  test-direct-calls:
    help: "Test direct HTTP calls without predefined endpoints"
    run: |
      {{ step "Testing direct HTTP calls" }}
      
      {{ info "Making direct HTTP calls without predefined endpoints" }}
      
      # Direct GET call
      {{ $getResponse := httpGet "https://reqbin.com/echo/get/json" }}
      {{ info "Direct GET call successful" }}
      
      # Direct POST call with custom options
      {{ $postOptions := dict 
           "headers" (dict 
                "Content-Type" "application/json"
                "X-Custom-Header" "drun-direct-call"
           )
           "timeout" "15s"
      }}
      
      {{ $postData := dict "direct" true "timestamp" (now "15:04:05") }}
      {{ $postResponse := httpPost "https://reqbin.com/echo/post/json" $postData $postOptions }}
      {{ info "Direct POST call successful" }}
      
      # Direct PUT call
      {{ $putData := dict "method" "PUT" "updated" true }}
      {{ $putResponse := httpPut "https://reqbin.com/echo/put/json" $putData }}
      {{ info "Direct PUT call successful" }}
      
      # Direct DELETE call
      {{ $deleteResponse := httpDelete "https://reqbin.com/echo/delete/json" }}
      {{ info "Direct DELETE call successful" }}
      
      {{ success "All direct HTTP calls completed" }}

  # Advanced features demo
  test-advanced:
    help: "Test advanced HTTP features (retries, caching, error handling)"
    run: |
      {{ step "Testing advanced HTTP features" }}
      
      {{ info "Testing retry mechanism with timeout" }}
      
      # Test with very short timeout to trigger retry
      {{ $options := dict 
           "timeout" "1ms"
           "headers" (dict "X-Test" "retry-demo")
      }}
      
      # This will likely timeout and retry
      {{ $response := httpGet "https://reqbin.com/echo/get/json" $options }}
      
      {{ if $response }}
      {{ success "Request succeeded (possibly after retries)" }}
      {{ else }}
      {{ warn "Request failed after retries (expected with 1ms timeout)" }}
      {{ end }}
      
      {{ info "Testing caching behavior" }}
      
      # First call - should hit the server
      {{ $start := now "15:04:05.000" }}
      {{ $cached1 := httpCallJSON "reqbin" (dict "url" "/get/json") }}
      {{ $time1 := now "15:04:05.000" }}
      
      # Second call - should use cache
      {{ $cached2 := httpCallJSON "reqbin" (dict "url" "/get/json") }}
      {{ $time2 := now "15:04:05.000" }}
      
      {{ info (printf "First call at: %s" $time1) }}
      {{ info (printf "Second call at: %s" $time2) }}
      {{ info "Second call should be faster due to caching" }}
      
      {{ success "Advanced features test completed" }}

  # Custom headers and authentication demo
  test-custom-headers:
    help: "Test custom headers and authentication patterns"
    run: |
      {{ step "Testing custom headers and authentication patterns" }}
      
      {{ info "Testing various header configurations" }}
      
      # Test with custom headers
      {{ $customOptions := dict 
           "headers" (dict 
                "X-API-Version" "v1"
                "X-Client-ID" "drun-demo"
                "X-Request-ID" (sha256 (now "2006-01-02T15:04:05Z07:00"))
                "Authorization" "Bearer demo-token-123"
                "User-Agent" "drun/1.4 (Custom Headers Demo)"
           )
           "query" (dict 
                "format" "json"
                "version" "1.0"
                "client" "drun"
           )
      }}
      
      {{ $response := httpCallJSON "reqbin" (merge $customOptions (dict "url" "/get/json")) }}
      
      {{ info "Custom headers request completed" }}
      
      # Test different authentication patterns (simulated)
      {{ info "Testing authentication patterns:" }}
      
      # Bearer token
      {{ $bearerOptions := dict "headers" (dict "Authorization" "Bearer fake-token") }}
      {{ httpGet "https://reqbin.com/echo/get/json" $bearerOptions }}
      {{ info "✓ Bearer token authentication pattern tested" }}
      
      # API Key in header
      {{ $apiKeyOptions := dict "headers" (dict "X-API-Key" "fake-api-key") }}
      {{ httpGet "https://reqbin.com/echo/get/json" $apiKeyOptions }}
      {{ info "✓ API Key header authentication pattern tested" }}
      
      # API Key in query
      {{ $queryKeyOptions := dict "query" (dict "api_key" "fake-query-key") }}
      {{ httpGet "https://reqbin.com/echo/get/json" $queryKeyOptions }}
      {{ info "✓ API Key query authentication pattern tested" }}
      
      {{ success "Custom headers and authentication tests completed" }}

  # Error handling demo
  test-error-handling:
    help: "Test error handling and edge cases"
    run: |
      {{ step "Testing error handling and edge cases" }}
      
      {{ info "Testing various error scenarios" }}
      
      # Test invalid URL (should fail gracefully)
      {{ warn "Testing invalid URL (expected to fail):" }}
      {{ $invalidResponse := httpGet "https://invalid-domain-that-does-not-exist.com/test" }}
      
      {{ if $invalidResponse }}
      {{ error "Unexpected success with invalid URL" }}
      {{ else }}
      {{ info "✓ Invalid URL handled gracefully" }}
      {{ end }}
      
      # Test 404 response
      {{ warn "Testing 404 response:" }}
      {{ $notFoundResponse := httpGet "https://reqbin.com/echo/nonexistent/endpoint" }}
      {{ info "✓ 404 response handled" }}
      
      # Test with malformed JSON (if server returns it)
      {{ info "Testing edge cases completed" }}
      
      {{ success "Error handling tests completed" }}

  # Performance and benchmarking
  test-performance:
    help: "Test performance and measure response times"
    run: |
      {{ step "Testing HTTP client performance" }}
      
      {{ info "Running performance tests..." }}
      
      # Measure multiple requests
      {{ $iterations := 5 }}
      {{ info (printf "Making %d requests to measure performance" $iterations) }}
      
      {{ range $i := until $iterations }}
      {{ $start := now "15:04:05.000" }}
      {{ $response := httpCallJSON "reqbin" (dict "url" "/get/json") }}
      {{ $end := now "15:04:05.000" }}
      {{ info (printf "Request %d completed at %s" (add $i 1) $end) }}
      {{ end }}
      
      {{ info "Performance test completed" }}
      {{ info "Note: Actual timing would require more sophisticated measurement" }}
      
      {{ success "Performance tests completed" }}

  # Comprehensive demo
  demo:
    help: "Run a comprehensive demo of all HTTP capabilities"
    run: |
      {{ step "🌐 drun HTTP Client Comprehensive Demo" }}
      
      {{ info "This demo showcases drun's powerful HTTP client capabilities" }}
      {{ info "Using ReqBin echo service for testing: https://reqbin.com/echo" }}
      
      echo ""
      echo "🚀 Features demonstrated:"
      echo "  ✓ Predefined HTTP endpoints with configuration"
      echo "  ✓ Multiple HTTP methods (GET, POST, PUT, DELETE, HEAD)"
      echo "  ✓ JSON and XML content handling"
      echo "  ✓ Form data submission"
      echo "  ✓ Custom headers and authentication patterns"
      echo "  ✓ Request/response caching"
      echo "  ✓ Retry mechanisms with exponential backoff"
      echo "  ✓ Error handling and edge cases"
      echo "  ✓ Direct HTTP calls without predefined endpoints"
      echo ""
      
      {{ info "Running basic HTTP method tests..." }}
      drun test-get-json
      drun test-post-json
      drun test-post-form
      
      {{ info "Running advanced feature tests..." }}
      drun test-custom-headers
      
      echo ""
      {{ success "🎉 HTTP Client Demo completed successfully!" }}
      {{ info "Try running individual tests with: drun <test-name>" }}
      {{ info "Available tests: test-get-json, test-post-json, test-post-xml, test-post-form, test-advanced" }}

  # Quick test for development
  quick:
    help: "Quick test of basic HTTP functionality"
    run: |
      {{ step "Quick HTTP test" }}
      
      # Simple GET request
      {{ $response := httpCallJSON "reqbin" (dict "url" "/get/json") }}
      
      {{ if $response.success }}
      {{ success "✅ HTTP client is working!" }}
      echo "Response: {{ $response }}"
      {{ else }}
      {{ error "❌ HTTP client test failed" }}
      {{ end }}

  # List all available endpoints
  endpoints:
    help: "List all ReqBin echo endpoints used in this demo"
    run: |
      {{ step "ReqBin Echo Service Endpoints" }}
      
      echo "Available ReqBin echo endpoints:"
      echo ""
      echo "📡 GET Endpoints:"
      echo "  • https://reqbin.com/echo/get/json  - GET with JSON response"
      echo "  • https://reqbin.com/echo/get/xml   - GET with XML response"
      echo ""
      echo "📤 POST Endpoints:"
      echo "  • https://reqbin.com/echo/post/json - POST with JSON data"
      echo "  • https://reqbin.com/echo/post/xml  - POST with XML data"
      echo "  • https://reqbin.com/echo/post/form - POST with form data"
      echo ""
      echo "🔍 Other Methods:"
      echo "  • https://reqbin.com/echo/head/json - HEAD request"
      echo "  • https://reqbin.com/echo/put/json  - PUT request"
      echo "  • https://reqbin.com/echo/delete/json - DELETE request"
      echo ""
      echo "🌐 Service Info:"
      echo "  • Base URL: https://reqbin.com/echo"
      echo "  • Purpose: HTTP testing and echo service"
      echo "  • Features: Echoes back request data for testing"
      echo ""
      
      {{ success "Endpoint information displayed" }}
