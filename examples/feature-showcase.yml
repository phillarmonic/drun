# drun Feature Showcase
# Comprehensive demonstration of all implemented features
version: 0.1

# Include shared recipes
include:
  - "shared/docker-common.yml"

# Define secrets
secrets:
  demo_secret:
    source: "env://DEMO_SECRET"
    required: false
    description: "Demo secret for showcase"

env:
  PROJECT_NAME: "drun-showcase"
  VERSION: "{{ gitShortCommit }}"
  BUILD_TIME: "$(date -Iseconds)"

recipes:
  # Comprehensive feature showcase
  showcase-all:
    help: "Showcase all implemented drun features"
    run: |
      {{ step "üéâ drun Feature Showcase" }}
      echo "========================================"
      echo ""
      
      {{ info "Project: $PROJECT_NAME" }}
      {{ info "Version: $VERSION" }}
      {{ info "Build Time: $BUILD_TIME" }}
      echo ""
      
      {{ step "‚úÖ IMPLEMENTED FEATURES" }}
      echo ""
      
      echo "üéØ SMART DETECTION:"
      echo "  ‚Ä¢ Project Type: {{ packageManager }}"
      echo "  ‚Ä¢ Git Branch: {{ gitBranch }}"
      echo "  ‚Ä¢ Git Commit: {{ gitShortCommit }}"
      echo "  ‚Ä¢ Is Dirty: {{ isDirty }}"
      echo "  ‚Ä¢ Is CI: {{ isCI }}"
      echo "  ‚Ä¢ OS/Arch: {{ os }}/{{ arch }}"
      echo ""
      
      echo "üê≥ DOCKER INTEGRATION:"
      echo "  ‚Ä¢ Compose Command: {{ dockerCompose }}"
      echo "  ‚Ä¢ Buildx Command: {{ dockerBuildx }}"
      echo ""
      
      echo "üìÅ FILE DETECTION:"
      echo "  ‚Ä¢ Has Dockerfile: {{ hasFile "Dockerfile" }}"
      echo "  ‚Ä¢ Has package.json: {{ hasFile "package.json" }}"
      echo "  ‚Ä¢ Has go.mod: {{ hasFile "go.mod" }}"
      echo ""
      
      echo "üîê SECRETS MANAGEMENT:"
      {{ if hasSecret "demo_secret" }}
      echo "  ‚Ä¢ Demo Secret: Available"
      {{ else }}
      echo "  ‚Ä¢ Demo Secret: Not set (optional)"
      {{ end }}
      echo ""
      
      echo "üìä STATUS MESSAGES:"
      {{ info "Info messages with emoji" }}
      {{ warn "Warning messages with emoji" }}
      {{ error "Error messages with emoji (non-fatal)" }}
      {{ success "Success messages with emoji" }}
      echo ""
      
      {{ success "All features working perfectly!" }}

  # Matrix execution demo
  matrix-showcase:
    help: "Showcase matrix execution"
    matrix:
      env: ["dev", "staging", "prod"]
      region: ["us-east", "eu-west"]
    run: |
      {{ step "Matrix execution for {{ .matrix_env }}/{{ .matrix_region }}" }}
      
      echo "Environment: {{ .matrix_env }}"
      echo "Region: {{ .matrix_region }}"
      echo "Project: $PROJECT_NAME"
      
      # Environment-specific logic
      {{ if eq .matrix_env "prod" }}
      {{ warn "Production environment - extra validation" }}
      {{ else }}
      {{ info "Non-production environment" }}
      {{ end }}
      
      {{ success "Matrix job {{ .matrix_env }}/{{ .matrix_region }} completed" }}

  # Include demonstration
  include-showcase:
    help: "Showcase recipe includes"
    deps: [docker-info]  # From shared/docker-common.yml
    run: |
      {{ step "Include demonstration" }}
      
      {{ info "This recipe depends on 'docker-info' from shared/docker-common.yml" }}
      {{ info "Includes allow sharing recipes across projects" }}
      
      # Use snippet from included file
      {{ snippet "docker_check" }}
      
      {{ success "Include showcase completed" }}

  # Performance demonstration
  performance-showcase:
    help: "Showcase performance features"
    run: |
      {{ step "Performance showcase" }}
      
      START_TIME=$(date +%s%N)
      
      {{ info "drun performance highlights:" }}
      echo "  ‚Ä¢ Template rendering: ~29Œºs"
      echo "  ‚Ä¢ YAML loading: ~2.5Œºs"
      echo "  ‚Ä¢ DAG building: ~3.1Œºs"
      echo "  ‚Ä¢ Memory usage: <10MB for large projects"
      echo ""
      
      {{ info "Simulating work..." }}
      for i in {1..5}; do
        echo "  Processing item $i/5"
        sleep 0.1
      done
      
      END_TIME=$(date +%s%N)
      DURATION=$(( (END_TIME - START_TIME) / 1000000 ))
      
      {{ success "Performance showcase completed in ${DURATION}ms" }}

  # All features summary
  feature-summary:
    help: "Complete feature summary"
    run: |
      {{ step "üöÄ drun Complete Feature Summary" }}
      echo "================================================="
      echo ""
      
      echo "‚úÖ CORE FEATURES:"
      echo "  ‚Ä¢ YAML-based configuration"
      echo "  ‚Ä¢ Recipe dependencies and parallel execution"
      echo "  ‚Ä¢ Positional arguments and named parameters"
      echo "  ‚Ä¢ Cross-platform shell support"
      echo "  ‚Ä¢ Template engine with custom functions"
      echo "  ‚Ä¢ High-performance execution (microsecond operations)"
      echo ""
      
      echo "‚úÖ SMART INTEGRATIONS:"
      echo "  ‚Ä¢ Docker command detection (compose/buildx)"
      echo "  ‚Ä¢ Git integration (branch, commit, dirty status)"
      echo "  ‚Ä¢ Package manager detection (npm, yarn, go, etc.)"
      echo "  ‚Ä¢ CI environment detection"
      echo "  ‚Ä¢ File existence checking"
      echo ""
      
      echo "‚úÖ ADVANCED FEATURES:"
      echo "  ‚Ä¢ Matrix execution across multiple configurations"
      echo "  ‚Ä¢ Recipe includes (local files with glob patterns)"
      echo "  ‚Ä¢ Secrets management (env://, file:// sources)"
      echo "  ‚Ä¢ Structured logging with emoji status messages"
      echo "  ‚Ä¢ Template functions for common operations"
      echo ""
      
      echo "‚úÖ DEVELOPER EXPERIENCE:"
      echo "  ‚Ä¢ Intuitive YAML syntax"
      echo "  ‚Ä¢ Rich error messages with suggestions"
      echo "  ‚Ä¢ Dry-run mode for testing"
      echo "  ‚Ä¢ Recipe listing and help"
      echo "  ‚Ä¢ Shell completion support"
      echo ""
      
      echo "üöß COMING SOON:"
      echo "  ‚Ä¢ File watching for auto-execution"
      echo "  ‚Ä¢ Remote recipe includes (HTTP, Git)"
      echo "  ‚Ä¢ Plugin system for extensibility"
      echo "  ‚Ä¢ Interactive TUI mode"
      echo "  ‚Ä¢ Advanced logging formats (JSON, logfmt)"
      echo "  ‚Ä¢ Web UI and mobile apps"
      echo ""
      
      {{ success "drun is ready for production use!" }}
      echo ""
      echo "üåü Try these examples:"
      echo "  drun showcase-all"
      echo "  drun matrix-showcase"
      echo "  drun include-showcase"
      echo "  drun performance-showcase"

  # Quick start guide
  quick-start:
    help: "Quick start guide for new users"
    run: |
      {{ step "üöÄ drun Quick Start Guide" }}
      echo "================================="
      echo ""
      
      echo "1Ô∏è‚É£  CREATE A drun.yml FILE:"
      echo "   version: 0.1"
      echo "   recipes:"
      echo "     hello:"
      echo "       help: \"Say hello\""
      echo "       run: echo \"Hello, drun!\""
      echo ""
      
      echo "2Ô∏è‚É£  RUN YOUR FIRST RECIPE:"
      echo "   drun hello"
      echo ""
      
      echo "3Ô∏è‚É£  LIST AVAILABLE RECIPES:"
      echo "   drun --list"
      echo ""
      
      echo "4Ô∏è‚É£  USE ADVANCED FEATURES:"
      echo "   ‚Ä¢ Add dependencies: deps: [other-recipe]"
      echo "   ‚Ä¢ Use templates: run: echo \"Hello {{ .name }}!\""
      echo "   ‚Ä¢ Add arguments: positionals: [{name: \"name\", required: true}]"
      echo "   ‚Ä¢ Include files: include: [\"shared/common.yml\"]"
      echo ""
      
      echo "5Ô∏è‚É£  EXPLORE EXAMPLES:"
      echo "   ‚Ä¢ examples/simple.yml - Basic recipes"
      echo "   ‚Ä¢ examples/docker-devops.yml - Docker workflows"
      echo "   ‚Ä¢ examples/matrix-demo.yml - Matrix execution"
      echo "   ‚Ä¢ examples/secrets-demo.yml - Secrets management"
      echo ""
      
      {{ success "You're ready to use drun! üéâ" }}
      echo ""
      echo "üìö Learn more:"
      echo "   ‚Ä¢ README.md - Full documentation"
      echo "   ‚Ä¢ examples/ - More examples"
      echo "   ‚Ä¢ drun --help - Command help"
