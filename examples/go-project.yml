# Simple Go Project Example
# Usage: drun -f examples/go-project.yml <recipe>

version: 0.1

vars:
  app_name: "myapp"
  go_version: "1.21"

env:
  CGO_ENABLED: "0"
  GOOS: linux
  GOARCH: amd64

recipes:
  # Basic recipes
  build:
    help: "Build the Go application"
    run: |
      echo "Building {{ .app_name }}..."
      go build -o bin/{{ .app_name }} ./cmd/{{ .app_name }}
      echo "✅ Build complete: bin/{{ .app_name }}"

  test:
    help: "Run all tests"
    run: |
      echo "Running tests..."
      go test -v ./...
      echo "✅ Tests passed"

  clean:
    help: "Clean build artifacts"
    run: |
      echo "Cleaning..."
      rm -rf bin/ dist/
      go clean -cache
      echo "✅ Clean complete"

  # Recipe with dependencies
  check:
    help: "Run all checks"
    deps: [fmt, vet, test]
    run: |
      echo "✅ All checks passed!"

  fmt:
    help: "Format Go code"
    run: |
      echo "Formatting code..."
      go fmt ./...

  vet:
    help: "Run go vet"
    run: |
      echo "Running go vet..."
      go vet ./...

  # Recipe with positional arguments
  run:
    help: "Run the application with arguments"
    positionals:
      - name: args
        variadic: true
    run: |
      go run ./cmd/{{ .app_name }} {{ range .args }}{{ . }} {{ end }}

  # Cross-compilation
  build-all:
    help: "Build for all platforms"
    run: |
      echo "Building for multiple platforms..."
      GOOS=linux GOARCH=amd64 go build -o dist/{{ .app_name }}-linux-amd64 ./cmd/{{ .app_name }}
      GOOS=linux GOARCH=arm64 go build -o dist/{{ .app_name }}-linux-arm64 ./cmd/{{ .app_name }}
      GOOS=darwin GOARCH=amd64 go build -o dist/{{ .app_name }}-darwin-amd64 ./cmd/{{ .app_name }}
      GOOS=darwin GOARCH=arm64 go build -o dist/{{ .app_name }}-darwin-arm64 ./cmd/{{ .app_name }}
      GOOS=windows GOARCH=amd64 go build -o dist/{{ .app_name }}-windows-amd64.exe ./cmd/{{ .app_name }}
      echo "✅ Multi-platform build complete"
