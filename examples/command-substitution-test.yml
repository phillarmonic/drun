# Command Substitution Test
# Tests both template functions and shell command substitution
version: 0.1

env:
  # Using template functions (preferred)
  DOCKER_COMPOSE_CMD: "{{ dockerCompose }}"
  DOCKER_BUILDX_CMD: "{{ dockerBuildx }}"
  
  # Using shell command substitution (also supported)
  CURRENT_USER: "$(whoami)"
  CURRENT_DIR: "$(pwd)"
  GIT_BRANCH: "$(git branch --show-current 2>/dev/null || echo 'no-git')"

recipes:
  show-all:
    help: "Show both template functions and command substitution results"
    run: |
      echo "=== Template Functions ==="
      echo "Docker Compose: $DOCKER_COMPOSE_CMD"
      echo "Docker Buildx: $DOCKER_BUILDX_CMD"
      echo ""
      echo "=== Command Substitution in Env ==="
      echo "Current User: $CURRENT_USER"
      echo "Current Dir: $CURRENT_DIR"
      echo "Git Branch: $GIT_BRANCH"
      echo ""
      echo "=== Runtime Command Substitution ==="
      echo "Date: $(date)"
      echo "Uptime: $(uptime | cut -d',' -f1)"
      echo "Docker Version: $(docker --version 2>/dev/null || echo 'Docker not found')"
      echo ""
      echo "=== Mixed Usage ==="
      echo "Running $DOCKER_COMPOSE_CMD version:"
      $DOCKER_COMPOSE_CMD version 2>/dev/null || echo "Compose not available"

  test-dynamic:
    help: "Test dynamic command detection and substitution"
    run: |
      echo "🔍 Dynamic Command Detection:"
      
      # Use template functions for detection
      COMPOSE_CMD="{{ dockerCompose }}"
      BUILDX_CMD="{{ dockerBuildx }}"
      
      echo "Detected compose: $COMPOSE_CMD"
      echo "Detected buildx: $BUILDX_CMD"
      
      # Use command substitution for runtime checks
      if [ -n "$COMPOSE_CMD" ]; then
        echo "Compose version: $($COMPOSE_CMD version --short 2>/dev/null || echo 'version check failed')"
      fi
      
      if [ -n "$BUILDX_CMD" ]; then
        echo "Buildx version: $($BUILDX_CMD version 2>/dev/null | head -1 || echo 'version check failed')"
      fi
      
      # Test command availability at runtime
      echo ""
      echo "🧪 Runtime Command Tests:"
      
      for cmd in docker kubectl helm terraform; do
        if command -v $cmd >/dev/null 2>&1; then
          VERSION=$(${cmd} version 2>/dev/null | head -1 || echo "version unknown")
          echo "✅ $cmd: $VERSION"
        else
          echo "❌ $cmd: not found"
        fi
      done

  build-example:
    help: "Example build using detected commands"
    positionals:
      - name: tag
        default: "$(git rev-parse --short HEAD 2>/dev/null || echo 'latest')"
    run: |
      echo "🏗️  Building with detected Docker commands"
      
      # Use template function for command detection
      BUILDX_CMD="{{ dockerBuildx }}"
      
      if [ -z "$BUILDX_CMD" ]; then
        echo "❌ Docker Buildx not available"
        exit 1
      fi
      
      # Use command substitution for dynamic values
      BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      GIT_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
      
      echo "Tag: {{ .tag }}"
      echo "Build Date: $BUILD_DATE"
      echo "Git Commit: $GIT_COMMIT"
      echo "Using: $BUILDX_CMD"
      
      # Simulate build (dry run)
      echo ""
      echo "Would run:"
      echo "$BUILDX_CMD build \\"
      echo "  --build-arg BUILD_DATE=$BUILD_DATE \\"
      echo "  --build-arg GIT_COMMIT=$GIT_COMMIT \\"
      echo "  --tag myapp:{{ .tag }} \\"
      echo "  ."
