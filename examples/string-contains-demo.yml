# String Contains Demo
# Demonstrates the stringContains function for conditional logic

recipes:
  environment-check:
    description: "Check environment and configure accordingly"
    flags:
      env: { type: string, default: "development" }
    run: |
      {{ step "Environment Configuration" }}
      
      # Check environment type using stringContains
      {{ if stringContains .env "prod" }}
      {{ success "Production environment detected" }}
      export NODE_ENV=production
      export LOG_LEVEL=warn
      export DEBUG=false
      {{ else if stringContains .env "dev" }}
      {{ info "Development environment detected" }}
      export NODE_ENV=development
      export LOG_LEVEL=debug
      export DEBUG=true
      {{ else if stringContains .env "test" }}
      {{ info "Test environment detected" }}
      export NODE_ENV=test
      export LOG_LEVEL=error
      export DEBUG=false
      {{ else }}
      {{ warn "Unknown environment: {{ .env }}" }}
      {{ warn "Defaulting to development settings" }}
      export NODE_ENV=development
      export LOG_LEVEL=debug
      {{ end }}
      
      {{ success "Environment configured successfully" }}

  file-processor:
    description: "Process files based on their type"
    positionals:
      - name: files
        required: true
        description: "Comma-separated list of files to process"
    run: |
      {{ step "Processing files by type" }}
      
      # Split the files by comma and process each
      {{ $fileList := split "," .files }}
      {{ range $file := $fileList }}
      {{ $trimmedFile := $file | trim }}
      
      {{ if stringContains $trimmedFile ".js" }}
      {{ info (printf "Processing JavaScript file: %s" $trimmedFile) }}
      echo "Running ESLint on {{ $trimmedFile }}"
      # eslint "{{ $trimmedFile }}"
      
      {{ else if stringContains $trimmedFile ".ts" }}
      {{ info (printf "Processing TypeScript file: %s" $trimmedFile) }}
      echo "Running TypeScript compiler on {{ $trimmedFile }}"
      # tsc --noEmit "{{ $trimmedFile }}"
      
      {{ else if stringContains $trimmedFile ".go" }}
      {{ info (printf "Processing Go file: %s" $trimmedFile) }}
      echo "Formatting Go file: {{ $trimmedFile }}"
      # go fmt "{{ $trimmedFile }}"
      
      {{ else if stringContains $trimmedFile ".py" }}
      {{ info (printf "Processing Python file: %s" $trimmedFile) }}
      echo "Formatting Python file: {{ $trimmedFile }}"
      # black "{{ $trimmedFile }}"
      
      {{ else if stringContains $trimmedFile ".md" }}
      {{ info (printf "Processing Markdown file: %s" $trimmedFile) }}
      echo "Linting Markdown: {{ $trimmedFile }}"
      # markdownlint "{{ $trimmedFile }}"
      
      {{ else }}
      {{ warn (printf "Unknown file type: %s" $trimmedFile) }}
      echo "Skipping {{ $trimmedFile }} - unknown file type"
      {{ end }}
      {{ end }}
      
      {{ success "File processing completed" }}

  branch-deployment:
    description: "Deploy based on git branch"
    run: |
      {{ step "Branch-based deployment" }}
      
      {{ $branch := gitBranch }}
      {{ info "Current branch: {{ $branch }}" }}
      
      {{ if stringContains $branch "main" }}
      {{ success "Main branch detected - Production deployment" }}
      echo "Deploying to production environment"
      echo "Using production configuration"
      
      {{ else if stringContains $branch "develop" }}
      {{ info "Develop branch detected - Staging deployment" }}
      echo "Deploying to staging environment"
      echo "Using staging configuration"
      
      {{ else if stringContains $branch "feature/" }}
      {{ info "Feature branch detected - Feature deployment" }}
      {{ $featureName := replace "feature/" "" $branch }}
      echo "Creating feature environment: {{ $featureName }}"
      echo "Deploying to feature-{{ $featureName }} namespace"
      
      {{ else if stringContains $branch "hotfix/" }}
      {{ warn "Hotfix branch detected - Emergency deployment" }}
      echo "Deploying hotfix to production"
      echo "Skipping normal validation steps"
      
      {{ else }}
      {{ error "Unknown branch pattern: {{ $branch }}" }}
      {{ error "Deployment not allowed for this branch" }}
      exit 1
      {{ end }}

  negation-examples:
    description: "Examples using negation with stringContains"
    flags:
      filename: { type: string, default: "app.js" }
      skip-tests: { type: bool, default: false }
    run: |
      {{ step "Negation examples with stringContains" }}
      
      # Example 1: Process non-test files
      {{ if not (stringContains .filename "test") }}
      {{ success (printf "Processing production file: %s" .filename) }}
      echo "Building {{ .filename }}"
      {{ else }}
      {{ info (printf "Skipping test file: %s" .filename) }}
      {{ end }}
      
      # Example 2: Check if NOT in CI
      {{ if not (stringContains (env "CI") "true") }}
      {{ warn "Not running in CI - enabling development mode" }}
      export DEBUG=true
      export VERBOSE=true
      {{ else }}
      {{ info "CI environment detected - using production settings" }}
      export DEBUG=false
      export VERBOSE=false
      {{ end }}
      
      # Example 3: Multiple negation conditions
      {{ if and (not (stringContains .filename ".test.")) (not (stringContains .filename ".spec.")) }}
      {{ success (printf "Processing non-test file: %s" .filename) }}
      echo "Running production build on {{ .filename }}"
      {{ else }}
      {{ info (printf "Test file detected: %s" .filename) }}
      {{ if not .skip_tests }}
      echo "Running tests on {{ .filename }}"
      {{ else }}
      echo "Skipping tests (--skip-tests flag set)"
      {{ end }}
      {{ end }}

  advanced-conditions:
    description: "Advanced conditional logic with stringContains"
    flags:
      service: { type: string, default: "web" }
      environment: { type: string, default: "development" }
    run: |
      {{ step "Advanced conditional deployment" }}
      
      {{ $service := .service }}
      {{ $env := .environment }}
      {{ $branch := gitBranch }}
      
      # Complex conditional logic
      {{ if and (stringContains $service "web") (stringContains $env "prod") (stringContains $branch "main") }}
      {{ success "Production web service deployment" }}
      echo "Deploying web service to production"
      echo "Using load balancer configuration"
      echo "Enabling SSL termination"
      
      {{ else if and (stringContains $service "api") (or (stringContains $env "staging") (stringContains $env "prod")) }}
      {{ info "API service deployment to {{ $env }}" }}
      echo "Deploying API service"
      echo "Configuring database connections"
      
      {{ else if and (stringContains $service "worker") (not (stringContains $env "prod")) }}
      {{ info "Worker service deployment to non-production" }}
      echo "Deploying background worker"
      echo "Using development queue configuration"
      
      {{ else }}
      {{ warn "Deployment configuration not recognized" }}
      {{ warn "Service: {{ $service }}, Environment: {{ $env }}, Branch: {{ $branch }}" }}
      echo "Using default deployment strategy"
      {{ end }}

  comparison-demo:
    description: "Compare stringContains vs Sprig contains"
    run: |
      {{ step "Comparing stringContains vs Sprig contains" }}
      
      # Our stringContains function (intuitive order)
      {{ info "Using stringContains (string, substring):" }}
      {{ if stringContains "hello world" "world" }}
      echo "✅ stringContains found 'world' in 'hello world'"
      {{ end }}
      
      # Sprig's contains function (reverse order)
      {{ info "Using Sprig contains (substring, string):" }}
      {{ if contains "world" "hello world" }}
      echo "✅ Sprig contains found 'world' in 'hello world'"
      {{ end }}
      
      # Both work, but parameter order is different
      {{ success "Both functions work - choose based on preference!" }}
      {{ info "stringContains: more intuitive parameter order" }}
      {{ info "contains (Sprig): follows some other template engines" }}
