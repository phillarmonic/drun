# Frontend/React Project Example
# Usage: drun -f examples/frontend-react.yml <recipe>

version: 0.1

vars:
  app_name: "my-react-app"
  node_version: "18"
  build_dir: "dist"
  
env:
  NODE_ENV: development
  GENERATE_SOURCEMAP: "true"
  BROWSER: "none"

snippets:
  check_node: |
    if ! command -v node &> /dev/null; then
      echo "❌ Node.js is not installed"
      exit 1
    fi
    echo "Node version: $(node --version)"

  install_if_needed: |
    if [ ! -d "node_modules" ] || [ "package.json" -nt "node_modules" ]; then
      echo "Installing dependencies..."
      npm ci
    fi

recipes:
  # Development
  dev:
    help: "Start development server"
    run: |
      {{ snippet "check_node" }}
      {{ snippet "install_if_needed" }}
      echo "🚀 Starting development server..."
      npm run dev

  start:
    help: "Start development server (alias for dev)"
    deps: [dev]
    run: ""

  # Building
  build:
    help: "Build for production"
    env:
      NODE_ENV: production
      GENERATE_SOURCEMAP: "false"
    deps: [install]
    run: |
      echo "🏗️  Building for production..."
      npm run build
      echo "✅ Build complete in {{ .build_dir }}/"

  build-analyze:
    help: "Build and analyze bundle size"
    env:
      NODE_ENV: production
      ANALYZE: "true"
    deps: [install]
    run: |
      echo "🏗️  Building and analyzing bundle..."
      npm run build
      echo "Bundle analysis complete - check the generated report"

  preview:
    help: "Preview production build locally"
    deps: [build]
    run: |
      echo "👀 Previewing production build..."
      npm run preview

  # Dependencies
  install:
    help: "Install dependencies"
    run: |
      {{ snippet "check_node" }}
      echo "📦 Installing dependencies..."
      npm ci

  update:
    help: "Update dependencies"
    run: |
      echo "📦 Updating dependencies..."
      npm update
      npm audit fix
      echo "✅ Dependencies updated"

  # Testing
  test:
    help: "Run tests"
    flags:
      watch:
        type: bool
        default: false
      coverage:
        type: bool
        default: false
      ui:
        type: bool
        default: false
    deps: [install]
    run: |
      {{ if .ui }}
      echo "🧪 Running tests with UI..."
      npm run test:ui
      {{ else if .watch }}
      echo "🧪 Running tests in watch mode..."
      npm run test:watch
      {{ else if .coverage }}
      echo "🧪 Running tests with coverage..."
      npm run test:coverage
      {{ else }}
      echo "🧪 Running tests..."
      npm test
      {{ end }}

  test-e2e:
    help: "Run end-to-end tests"
    positionals:
      - name: browser
        default: "chromium"
        one_of: ["chromium", "firefox", "webkit"]
    deps: [build]
    run: |
      echo "🎭 Running E2E tests with {{ .browser }}..."
      npx playwright test --project={{ .browser }}

  test-e2e-ui:
    help: "Run E2E tests with UI"
    run: |
      echo "🎭 Running E2E tests with UI..."
      npx playwright test --ui

  # Code quality
  lint:
    help: "Lint code"
    flags:
      fix:
        type: bool
        default: false
    deps: [install]
    run: |
      {{ if .fix }}
      echo "🔧 Linting and fixing code..."
      npm run lint:fix
      {{ else }}
      echo "🔍 Linting code..."
      npm run lint
      {{ end }}

  format:
    help: "Format code with Prettier"
    deps: [install]
    run: |
      echo "💅 Formatting code..."
      npm run format

  type-check:
    help: "Run TypeScript type checking"
    deps: [install]
    run: |
      echo "🔍 Type checking..."
      npm run type-check

  # Storybook
  storybook:
    help: "Start Storybook development server"
    deps: [install]
    run: |
      echo "📚 Starting Storybook..."
      npm run storybook

  build-storybook:
    help: "Build Storybook for production"
    deps: [install]
    run: |
      echo "📚 Building Storybook..."
      npm run build-storybook
      echo "✅ Storybook built in storybook-static/"

  # Performance and optimization
  lighthouse:
    help: "Run Lighthouse performance audit"
    positionals:
      - name: url
        default: "http://localhost:3000"
    run: |
      echo "🔍 Running Lighthouse audit on {{ .url }}..."
      npx lighthouse {{ .url }} --output=html --output-path=lighthouse-report.html
      echo "✅ Report saved as lighthouse-report.html"

  bundle-analyzer:
    help: "Analyze bundle size"
    deps: [build]
    run: |
      echo "📊 Analyzing bundle size..."
      npx webpack-bundle-analyzer {{ .build_dir }}/static/js/*.js

  # Deployment
  deploy:
    help: "Deploy to environment"
    positionals:
      - name: environment
        required: true
        one_of: ["staging", "production"]
    deps: [build, test]
    run: |
      echo "🚀 Deploying to {{ .environment }}..."
      {{ if eq .environment "production" }}
      echo "⚠️  PRODUCTION DEPLOYMENT"
      # Production deployment (e.g., to S3, Netlify, Vercel)
      npm run deploy:prod
      {{ else }}
      echo "🧪 Deploying to staging"
      npm run deploy:staging
      {{ end }}
      echo "✅ Deployment complete"

  # Docker operations
  docker-build:
    help: "Build Docker image"
    positionals:
      - name: tag
        default: "latest"
    run: |
      echo "🐳 Building Docker image..."
      docker build -t {{ .app_name }}:{{ .tag }} .

  docker-run:
    help: "Run Docker container"
    positionals:
      - name: port
        default: "3000"
    deps: [docker-build]
    run: |
      echo "🐳 Running Docker container on port {{ .port }}..."
      docker run -p {{ .port }}:80 {{ .app_name }}:latest

  # Maintenance
  clean:
    help: "Clean build artifacts and dependencies"
    run: |
      echo "🧹 Cleaning..."
      rm -rf {{ .build_dir }} node_modules .next .turbo
      npm cache clean --force
      echo "✅ Clean complete"

  reset:
    help: "Reset project (clean + fresh install)"
    deps: [clean, install]
    run: |
      echo "✅ Project reset complete"

  # Security
  audit:
    help: "Run security audit"
    run: |
      echo "🔒 Running security audit..."
      npm audit
      echo "Checking for outdated packages..."
      npm outdated

  # All-in-one commands
  check:
    help: "Run all quality checks"
    deps: [lint, type-check, test]
    parallel_deps: true
    run: |
      echo "✅ All checks passed!"

  ci:
    help: "Run CI pipeline"
    deps: [install, check, build]
    parallel_deps: false
    run: |
      echo "✅ CI pipeline completed successfully!"
