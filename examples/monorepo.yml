# Monorepo/Multi-Service Example
# Usage: drun -f examples/monorepo.yml <recipe>

version: 0.1

vars:
  services: ["api", "web", "worker", "admin"]
  registry: "ghcr.io/myorg"
  
env:
  NODE_ENV: development
  COMPOSE_PROJECT_NAME: "myapp"

snippets:
  check_service: |
    if [ ! -d "services/{{ .service }}" ]; then
      echo "❌ Service '{{ .service }}' not found in services/"
      exit 1
    fi

  build_service: |
    echo "🏗️  Building {{ .service }}..."
    cd services/{{ .service }}
    npm run build
    cd ../..

recipes:
  # List services
  list-services:
    help: "List all available services"
    run: |
      echo "📋 Available Services:"
      {{ range .services }}
      echo "  - {{ . }}"
      {{ end }}

  # Development
  dev:
    help: "Start all services in development mode"
    run: |
      echo "🚀 Starting all services in development mode..."
      docker-compose -f docker-compose.dev.yml up --build

  dev-service:
    help: "Start specific service in development mode"
    positionals:
      - name: service
        required: true
        one_of: {{ .services | toJson }}
    run: |
      {{ snippet "check_service" }}
      echo "🚀 Starting {{ .service }} in development mode..."
      cd services/{{ .service }}
      npm run dev

  # Building
  build:
    help: "Build all services"
    run: |
      echo "🏗️  Building all services..."
      {{ range .services }}
      {{ template "build_service" dict "service" . }}
      {{ end }}
      echo "✅ All services built successfully"

  build-service:
    help: "Build specific service"
    positionals:
      - name: service
        required: true
        one_of: {{ .services | toJson }}
    run: |
      {{ snippet "check_service" }}
      {{ template "build_service" dict "service" .service }}
      echo "✅ {{ .service }} built successfully"

  # Testing
  test:
    help: "Run tests for all services"
    flags:
      coverage:
        type: bool
        default: false
    run: |
      echo "🧪 Running tests for all services..."
      {{ range .services }}
      echo "Testing {{ . }}..."
      cd services/{{ . }}
      {{ if $.coverage }}
      npm run test:coverage
      {{ else }}
      npm test
      {{ end }}
      cd ../..
      {{ end }}
      echo "✅ All tests completed"

  test-service:
    help: "Run tests for specific service"
    positionals:
      - name: service
        required: true
        one_of: {{ .services | toJson }}
    flags:
      watch:
        type: bool
        default: false
      coverage:
        type: bool
        default: false
    run: |
      {{ snippet "check_service" }}
      echo "🧪 Testing {{ .service }}..."
      cd services/{{ .service }}
      {{ if .watch }}
      npm run test:watch
      {{ else if .coverage }}
      npm run test:coverage
      {{ else }}
      npm test
      {{ end }}

  # Linting
  lint:
    help: "Lint all services"
    flags:
      fix:
        type: bool
        default: false
    run: |
      echo "🔍 Linting all services..."
      {{ range .services }}
      echo "Linting {{ . }}..."
      cd services/{{ . }}
      {{ if $.fix }}
      npm run lint:fix
      {{ else }}
      npm run lint
      {{ end }}
      cd ../..
      {{ end }}
      echo "✅ Linting completed"

  lint-service:
    help: "Lint specific service"
    positionals:
      - name: service
        required: true
        one_of: {{ .services | toJson }}
    flags:
      fix:
        type: bool
        default: false
    run: |
      {{ snippet "check_service" }}
      echo "🔍 Linting {{ .service }}..."
      cd services/{{ .service }}
      {{ if .fix }}
      npm run lint:fix
      {{ else }}
      npm run lint
      {{ end }}

  # Dependencies
  install:
    help: "Install dependencies for all services"
    run: |
      echo "📦 Installing dependencies for all services..."
      # Root dependencies
      npm ci
      # Service dependencies
      {{ range .services }}
      echo "Installing dependencies for {{ . }}..."
      cd services/{{ . }}
      npm ci
      cd ../..
      {{ end }}
      echo "✅ All dependencies installed"

  install-service:
    help: "Install dependencies for specific service"
    positionals:
      - name: service
        required: true
        one_of: {{ .services | toJson }}
    run: |
      {{ snippet "check_service" }}
      echo "📦 Installing dependencies for {{ .service }}..."
      cd services/{{ .service }}
      npm ci

  # Docker operations
  docker-build:
    help: "Build Docker images for all services"
    positionals:
      - name: tag
        default: "latest"
    run: |
      echo "🐳 Building Docker images for all services..."
      {{ range .services }}
      echo "Building {{ . }}:{{ $.tag }}..."
      docker build -t {{ $.registry }}/{{ . }}:{{ $.tag }} services/{{ . }}
      {{ end }}
      echo "✅ All Docker images built"

  docker-build-service:
    help: "Build Docker image for specific service"
    positionals:
      - name: service
        required: true
        one_of: {{ .services | toJson }}
      - name: tag
        default: "latest"
    run: |
      {{ snippet "check_service" }}
      echo "🐳 Building Docker image for {{ .service }}:{{ .tag }}..."
      docker build -t {{ .registry }}/{{ .service }}:{{ .tag }} services/{{ .service }}
      echo "✅ {{ .service }}:{{ .tag }} built successfully"

  docker-push:
    help: "Push Docker images for all services"
    positionals:
      - name: tag
        default: "latest"
    deps: [docker-build]
    run: |
      echo "📤 Pushing Docker images for all services..."
      {{ range .services }}
      echo "Pushing {{ . }}:{{ $.tag }}..."
      docker push {{ $.registry }}/{{ . }}:{{ $.tag }}
      {{ end }}
      echo "✅ All images pushed"

  # Environment management
  up:
    help: "Start all services with Docker Compose"
    positionals:
      - name: environment
        default: "development"
        one_of: ["development", "staging", "production"]
    run: |
      echo "🚀 Starting services in {{ .environment }} mode..."
      {{ if eq .environment "development" }}
      docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
      {{ else if eq .environment "staging" }}
      docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d
      {{ else }}
      docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
      {{ end }}
      echo "✅ Services started"

  down:
    help: "Stop all services"
    run: |
      echo "🛑 Stopping all services..."
      docker-compose down
      echo "✅ Services stopped"

  restart:
    help: "Restart all services"
    deps: [down, up]
    run: |
      echo "✅ Services restarted"

  restart-service:
    help: "Restart specific service"
    positionals:
      - name: service
        required: true
        one_of: {{ .services | toJson }}
    run: |
      echo "🔄 Restarting {{ .service }}..."
      docker-compose restart {{ .service }}
      echo "✅ {{ .service }} restarted"

  # Logs
  logs:
    help: "Show logs for all services"
    flags:
      follow:
        type: bool
        default: false
      tail:
        type: string
        default: "100"
    run: |
      {{ if .follow }}
      echo "📋 Following logs for all services..."
      docker-compose logs -f --tail={{ .tail }}
      {{ else }}
      echo "📋 Showing logs for all services (last {{ .tail }} lines)..."
      docker-compose logs --tail={{ .tail }}
      {{ end }}

  logs-service:
    help: "Show logs for specific service"
    positionals:
      - name: service
        required: true
        one_of: {{ .services | toJson }}
    flags:
      follow:
        type: bool
        default: false
      tail:
        type: string
        default: "100"
    run: |
      {{ if .follow }}
      echo "📋 Following logs for {{ .service }}..."
      docker-compose logs -f --tail={{ .tail }} {{ .service }}
      {{ else }}
      echo "📋 Showing logs for {{ .service }} (last {{ .tail }} lines)..."
      docker-compose logs --tail={{ .tail }} {{ .service }}
      {{ end }}

  # Database operations
  db-migrate:
    help: "Run database migrations"
    run: |
      echo "🔄 Running database migrations..."
      docker-compose exec api npm run migrate
      echo "✅ Migrations completed"

  db-seed:
    help: "Seed database"
    positionals:
      - name: environment
        default: "development"
        one_of: ["development", "staging", "test"]
    run: |
      echo "🌱 Seeding database for {{ .environment }}..."
      docker-compose exec api npm run seed:{{ .environment }}
      echo "✅ Database seeded"

  db-reset:
    help: "Reset database (migrate + seed)"
    deps: [db-migrate, db-seed]
    run: |
      echo "✅ Database reset completed"

  # Deployment
  deploy:
    help: "Deploy to environment"
    positionals:
      - name: environment
        required: true
        one_of: ["staging", "production"]
      - name: tag
        default: "latest"
    deps: [test, docker-build, docker-push]
    run: |
      echo "🚀 Deploying to {{ .environment }} with tag {{ .tag }}..."
      {{ if eq .environment "production" }}
      echo "⚠️  PRODUCTION DEPLOYMENT"
      kubectl apply -f k8s/production/
      kubectl set image deployment/api api={{ .registry }}/api:{{ .tag }} -n production
      kubectl set image deployment/web web={{ .registry }}/web:{{ .tag }} -n production
      kubectl set image deployment/worker worker={{ .registry }}/worker:{{ .tag }} -n production
      kubectl set image deployment/admin admin={{ .registry }}/admin:{{ .tag }} -n production
      {{ else }}
      echo "🧪 Deploying to staging"
      kubectl apply -f k8s/staging/
      kubectl set image deployment/api api={{ .registry }}/api:{{ .tag }} -n staging
      kubectl set image deployment/web web={{ .registry }}/web:{{ .tag }} -n staging
      kubectl set image deployment/worker worker={{ .registry }}/worker:{{ .tag }} -n staging
      kubectl set image deployment/admin admin={{ .registry }}/admin:{{ .tag }} -n staging
      {{ end }}
      echo "✅ Deployment completed"

  # Maintenance
  clean:
    help: "Clean all build artifacts and dependencies"
    run: |
      echo "🧹 Cleaning all services..."
      # Clean root
      rm -rf node_modules
      # Clean services
      {{ range .services }}
      echo "Cleaning {{ . }}..."
      rm -rf services/{{ . }}/node_modules
      rm -rf services/{{ . }}/dist
      rm -rf services/{{ . }}/build
      {{ end }}
      # Clean Docker
      docker system prune -f
      echo "✅ Cleanup completed"

  # Health checks
  health:
    help: "Check health of all services"
    run: |
      echo "🏥 Checking service health..."
      {{ range .services }}
      echo "Checking {{ . }}..."
      if docker-compose ps {{ . }} | grep -q "Up"; then
        echo "✅ {{ . }} is running"
      else
        echo "❌ {{ . }} is not running"
      fi
      {{ end }}

  # All-in-one commands
  check:
    help: "Run all quality checks"
    deps: [lint, test]
    parallel_deps: true
    run: |
      echo "✅ All checks passed!"

  ci:
    help: "Run CI pipeline"
    deps: [install, check, build]
    parallel_deps: false
    run: |
      echo "✅ CI pipeline completed successfully!"
