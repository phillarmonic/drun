# do-run configuration file with template-based string checking
# Learn more: https://github.com/phillarmonic/drun

version: 1.0

# Environment variables available to all recipes
env:
  PROJECT_NAME: "vibrez-api"
  BUILD_DATE: '{{ now "2006-01-02T15:04:05Z" }}'

# Variables for templating
vars:
  app_name: "myapp"
  version: 1.0.0

# Global defaults (optional)
defaults:
  working_dir: "."
  shell: auto
  timeout: "10m"

# Reusable code snippets
snippets:
  setup_colors: |
    # ANSI color codes
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    NC='\033[0m' # No Color

recipes:
  # Test with template-based string checking
  test:
    help: "Test lifecycle with template string checking"
    run: |
        {{ step "Checking Docker Compose status" }}
        {{ if not dockerCompose.IsRunning }}
            {{ error "Docker project doesn't seem to be running, attempting to start" }}
            {{ dockerCompose }} up -d
            {{ info "Waiting until services are ready..." }}
            sleep 5
        {{ end }}
        
        {{ step "Checking Symfony version" }}
        # Get the version output and store it in a variable
        VERSION_OUTPUT=$({{ dockerCompose }} exec -T php bash -c "frankenphp php-cli bin/console --version" 2>/dev/null || echo "failed")
        
        # Export it so we can use it in the template
        export VERSION_OUTPUT
        
        # Use template function to check if it contains symfony
        {{ if stringContains (env "VERSION_OUTPUT") "Symfony" }}
            {{ success "Symfony framework detected!" }}
            echo "Framework version: $VERSION_OUTPUT"
        {{ else }}
            {{ if stringContains (env "VERSION_OUTPUT") "symfony" }}
                {{ success "Symfony framework detected (lowercase)!" }}
                echo "Framework version: $VERSION_OUTPUT"
            {{ else }}
                {{ warn "Symfony not detected in version output" }}
                echo "Output was: $VERSION_OUTPUT"
            {{ end }}
        {{ end }}

  # Alternative approach using prerun to capture the version
  test-prerun:
    help: "Test with prerun to capture version"
    prerun: |
      # Ensure services are running first
      if ! {{ dockerCompose }} ps | grep -q "Up"; then
          {{ info "Starting Docker Compose services..." }}
          {{ dockerCompose }} up -d
          sleep 5
      fi
      
      # Capture version and make it available as environment variable
      export SYMFONY_VERSION=$({{ dockerCompose }} exec -T php bash -c "frankenphp php-cli bin/console --version" 2>/dev/null || echo "unknown")
    run: |
        {{ step "Checking captured Symfony version" }}
        
        # Now we can use the captured version in templates
        {{ if stringContains (env "SYMFONY_VERSION") "Symfony" }}
            {{ success "Symfony framework detected!" }}
            echo "Framework: {{ env "SYMFONY_VERSION" }}"
            
            # You can do additional checks based on version
            {{ if stringContains (env "SYMFONY_VERSION") "6." }}
                {{ info "Symfony 6.x detected - using modern features" }}
            {{ else if stringContains (env "SYMFONY_VERSION") "5." }}
                {{ info "Symfony 5.x detected - using compatible features" }}
            {{ else }}
                {{ warn "Unknown Symfony version - proceeding with caution" }}
            {{ end }}
            
        {{ else }}
            {{ error "Symfony not detected!" }}
            echo "Version output: {{ env "SYMFONY_VERSION" }}"
            exit 1
        {{ end }}

