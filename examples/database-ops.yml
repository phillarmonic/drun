# Database Operations Example
# Usage: drun -f examples/database-ops.yml <recipe>

version: 1.0

vars:
  db_name: "myapp_db"
  db_user: "myapp_user"
  backup_dir: "backups"

env:
  PGHOST: "localhost"
  PGPORT: "5432"
  PGDATABASE: "{{ .db_name }}"
  PGUSER: "{{ .db_user }}"
  # PGPASSWORD should be set externally for security

snippets:
  check_postgres: |
    if ! command -v psql &> /dev/null; then
      echo "‚ùå PostgreSQL client (psql) is not installed"
      exit 1
    fi

  check_connection: |
    if ! psql -c "SELECT 1;" >/dev/null 2>&1; then
      echo "‚ùå Cannot connect to database. Check connection settings."
      exit 1
    fi

  ensure_backup_dir: |
    mkdir -p {{ .backup_dir }}

recipes:
  # Connection and status
  status:
    help: "Check database connection and status"
    run: |
      {{ snippet "check_postgres" }}
      {{ snippet "check_connection" }}
      echo "‚úÖ Database connection successful"
      echo "Database info:"
      psql -c "SELECT version();"
      psql -c "SELECT current_database(), current_user, inet_server_addr(), inet_server_port();"

  info:
    help: "Show database information"
    run: |
      {{ snippet "check_connection" }}
      echo "üìä Database Information:"
      echo "========================"
      psql -c "
        SELECT 
          schemaname,
          tablename,
          pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
        FROM pg_tables 
        WHERE schemaname NOT IN ('information_schema', 'pg_catalog')
        ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;
      "

  # Backup operations
  backup:
    help: "Create database backup"
    positionals:
      - name: filename
        default: "{{ .db_name }}_{{ now \"2006-01-02_15-04-05\" }}.sql"
    run: |
      {{ snippet "check_postgres" }}
      {{ snippet "ensure_backup_dir" }}
      echo "üíæ Creating backup: {{ .backup_dir }}/{{ .filename }}"
      pg_dump {{ .db_name }} > {{ .backup_dir }}/{{ .filename }}
      echo "‚úÖ Backup created: {{ .backup_dir }}/{{ .filename }}"
      echo "Backup size: $(du -h {{ .backup_dir }}/{{ .filename }} | cut -f1)"

  backup-compressed:
    help: "Create compressed database backup"
    positionals:
      - name: filename
        default: "{{ .db_name }}_{{ now \"2006-01-02_15-04-05\" }}.sql.gz"
    run: |
      {{ snippet "check_postgres" }}
      {{ snippet "ensure_backup_dir" }}
      echo "üíæ Creating compressed backup: {{ .backup_dir }}/{{ .filename }}"
      pg_dump {{ .db_name }} | gzip > {{ .backup_dir }}/{{ .filename }}
      echo "‚úÖ Compressed backup created: {{ .backup_dir }}/{{ .filename }}"
      echo "Backup size: $(du -h {{ .backup_dir }}/{{ .filename }} | cut -f1)"

  restore:
    help: "Restore database from backup"
    positionals:
      - name: filename
        required: true
    run: |
      {{ snippet "check_postgres" }}
      if [ ! -f "{{ .backup_dir }}/{{ .filename }}" ]; then
        echo "‚ùå Backup file not found: {{ .backup_dir }}/{{ .filename }}"
        exit 1
      fi
      echo "‚ö†Ô∏è  This will replace the current database content!"
      read -p "Are you sure you want to restore from {{ .filename }}? (yes/no): " confirm
      if [ "$confirm" != "yes" ]; then
        echo "‚ùå Restore cancelled"
        exit 1
      fi
      echo "üîÑ Restoring from {{ .backup_dir }}/{{ .filename }}..."
      {{ if hasSuffix .filename ".gz" }}
      gunzip -c {{ .backup_dir }}/{{ .filename }} | psql {{ .db_name }}
      {{ else }}
      psql {{ .db_name }} < {{ .backup_dir }}/{{ .filename }}
      {{ end }}
      echo "‚úÖ Database restored successfully"

  # Migration operations
  migrate:
    help: "Run database migrations"
    positionals:
      - name: direction
        default: "up"
        one_of: ["up", "down"]
      - name: steps
        default: "all"
    run: |
      {{ snippet "check_connection" }}
      echo "üîÑ Running migrations {{ .direction }}..."
      {{ if eq .direction "up" }}
      {{ if eq .steps "all" }}
      migrate -path migrations -database "postgres://$PGUSER:$PGPASSWORD@$PGHOST:$PGPORT/$PGDATABASE?sslmode=disable" up
      {{ else }}
      migrate -path migrations -database "postgres://$PGUSER:$PGPASSWORD@$PGHOST:$PGPORT/$PGDATABASE?sslmode=disable" up {{ .steps }}
      {{ end }}
      {{ else }}
      migrate -path migrations -database "postgres://$PGUSER:$PGPASSWORD@$PGHOST:$PGPORT/$PGDATABASE?sslmode=disable" down {{ .steps }}
      {{ end }}
      echo "‚úÖ Migrations completed"

  migration-status:
    help: "Show migration status"
    run: |
      {{ snippet "check_connection" }}
      echo "üìã Migration Status:"
      migrate -path migrations -database "postgres://$PGUSER:$PGPASSWORD@$PGHOST:$PGPORT/$PGDATABASE?sslmode=disable" version

  create-migration:
    help: "Create new migration file"
    positionals:
      - name: name
        required: true
    run: |
      echo "üìù Creating migration: {{ .name }}"
      migrate create -ext sql -dir migrations {{ .name }}
      echo "‚úÖ Migration files created in migrations/"

  # Data operations
  seed:
    help: "Seed database with test data"
    positionals:
      - name: environment
        default: "development"
        one_of: ["development", "staging", "test"]
    run: |
      {{ snippet "check_connection" }}
      {{ if eq .environment "development" }}
      echo "üå± Seeding development data..."
      psql -f seeds/development.sql
      {{ else if eq .environment "staging" }}
      echo "üå± Seeding staging data..."
      psql -f seeds/staging.sql
      {{ else }}
      echo "üå± Seeding test data..."
      psql -f seeds/test.sql
      {{ end }}
      echo "‚úÖ Database seeded successfully"

  reset:
    help: "Reset database (drop, create, migrate, seed)"
    positionals:
      - name: environment
        default: "development"
        one_of: ["development", "staging", "test"]
    run: |
      echo "‚ö†Ô∏è  This will completely reset the database!"
      read -p "Are you sure? (yes/no): " confirm
      if [ "$confirm" != "yes" ]; then
        echo "‚ùå Reset cancelled"
        exit 1
      fi
      echo "üîÑ Resetting database..."
      dropdb --if-exists {{ .db_name }}
      createdb {{ .db_name }}
      echo "‚úÖ Database reset complete"

  # Maintenance
  vacuum:
    help: "Vacuum database"
    flags:
      full:
        type: bool
        default: false
      analyze:
        type: bool
        default: true
    run: |
      {{ snippet "check_connection" }}
      {{ if .full }}
      echo "üßπ Running VACUUM FULL..."
      psql -c "VACUUM FULL;"
      {{ else }}
      echo "üßπ Running VACUUM..."
      psql -c "VACUUM;"
      {{ end }}
      {{ if .analyze }}
      echo "üìä Running ANALYZE..."
      psql -c "ANALYZE;"
      {{ end }}
      echo "‚úÖ Vacuum completed"

  reindex:
    help: "Reindex database"
    positionals:
      - name: table
        default: ""
    run: |
      {{ snippet "check_connection" }}
      {{ if .table }}
      echo "üîÑ Reindexing table: {{ .table }}"
      psql -c "REINDEX TABLE {{ .table }};"
      {{ else }}
      echo "üîÑ Reindexing entire database..."
      psql -c "REINDEX DATABASE {{ .db_name }};"
      {{ end }}
      echo "‚úÖ Reindex completed"

  # Monitoring
  activity:
    help: "Show current database activity"
    run: |
      {{ snippet "check_connection" }}
      echo "üëÄ Current Database Activity:"
      psql -c "
        SELECT 
          pid,
          usename,
          application_name,
          client_addr,
          state,
          query_start,
          left(query, 50) as query
        FROM pg_stat_activity 
        WHERE state != 'idle' 
        ORDER BY query_start;
      "

  locks:
    help: "Show database locks"
    run: |
      {{ snippet "check_connection" }}
      echo "üîí Database Locks:"
      psql -c "
        SELECT 
          l.pid,
          l.mode,
          l.locktype,
          l.relation::regclass,
          a.usename,
          a.query
        FROM pg_locks l
        JOIN pg_stat_activity a ON l.pid = a.pid
        WHERE l.granted = true
        ORDER BY l.pid;
      "

  # Utilities
  list-backups:
    help: "List available backups"
    run: |
      {{ snippet "ensure_backup_dir" }}
      echo "üìÅ Available Backups:"
      ls -lh {{ .backup_dir }}/*.sql* 2>/dev/null || echo "No backups found"

  cleanup-backups:
    help: "Clean up old backups"
    positionals:
      - name: days
        default: "30"
    run: |
      {{ snippet "ensure_backup_dir" }}
      echo "üßπ Cleaning up backups older than {{ .days }} days..."
      find {{ .backup_dir }} -name "*.sql*" -mtime +{{ .days }} -delete
      echo "‚úÖ Cleanup completed"

  # Performance
  slow-queries:
    help: "Show slow queries (requires pg_stat_statements)"
    run: |
      {{ snippet "check_connection" }}
      echo "üêå Slowest Queries:"
      psql -c "
        SELECT 
          round(total_time::numeric, 2) as total_time_ms,
          calls,
          round(mean_time::numeric, 2) as mean_time_ms,
          left(query, 80) as query
        FROM pg_stat_statements 
        ORDER BY total_time DESC 
        LIMIT 10;
      "
