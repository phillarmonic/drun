version: "1.4"

# HTTP API Demo
# Demonstrates drun's HTTP client capabilities using reliable public APIs
# Uses JSONPlaceholder and HTTPBin for testing

# HTTP endpoint definitions
http:
  jsonplaceholder:
    url: "https://jsonplaceholder.typicode.com"
    headers:
      User-Agent: "drun/1.4 HTTP Demo"
      Accept: "application/json"
    timeout: 30s
    retry:
      max_attempts: 3
      backoff: "exponential"
      base_delay: 1s
      max_delay: 10s
    cache:
      ttl: 2m
    description: "JSONPlaceholder - Free fake REST API"
  
  httpbin:
    url: "https://httpbin.org"
    headers:
      Accept: "application/json"
    timeout: 30s
    retry:
      max_attempts: 3
      backoff: "exponential"
      base_delay: 1s
      max_delay: 10s
    cache:
      ttl: 1m
    description: "HTTPBin - HTTP request & response service"

# Environment variables
env:
  DEMO_NAME: "drun HTTP Demo"
  DEMO_VERSION: "1.0"

recipes:
  # Quick test to verify HTTP client is working
  quick:
    help: "Quick test of HTTP functionality"
    run: |
      {{ step "Quick HTTP test" }}
      
      # Test JSON parsing
      {{ $post := httpCallJSON "jsonplaceholder" (dict "url" "/posts/1") }}
      
      {{ if $post.title }}
      {{ success "‚úÖ HTTP client is working!" }}
      echo "Post title: {{ $post.title }}"
      echo "Post ID: {{ $post.id }}"
      echo "User ID: {{ $post.userId }}"
      {{ else }}
      {{ error "‚ùå HTTP client test failed" }}
      {{ end }}

  # Test JSONPlaceholder API
  test-jsonplaceholder:
    help: "Test JSONPlaceholder REST API"
    run: |
      {{ step "Testing JSONPlaceholder API" }}
      
      {{ info "Fetching a sample post..." }}
      {{ $post := httpCallJSON "jsonplaceholder" (dict "url" "/posts/1") }}
      
      echo "üìÑ Post Details:"
      echo "  ID: {{ $post.id }}"
      echo "  Title: {{ $post.title }}"
      echo "  User ID: {{ $post.userId }}"
      echo "  Body: {{ truncate 100 $post.body }}..."
      
      {{ info "Fetching user information..." }}
      {{ $userUrl := printf "/users/%.0f" $post.userId }}
      {{ $userResponse := httpGet (printf "https://jsonplaceholder.typicode.com%s" $userUrl) }}
      {{ $user := $userResponse | fromJson }}
      
      echo ""
      echo "üë§ Author Details:"
      echo "  Name: {{ $user.name }}"
      echo "  Email: {{ $user.email }}"
      echo "  Company: {{ index $user.company "name" }}"
      echo "  Website: {{ $user.website }}"
      
      {{ success "JSONPlaceholder API test completed" }}

  # Test HTTPBin service
  test-httpbin:
    help: "Test HTTPBin service for HTTP methods"
    run: |
      {{ step "Testing HTTPBin service" }}
      
      {{ info "Testing GET request..." }}
      {{ $getResponse := httpCallJSON "httpbin" (dict "url" "/get") }}
      echo "‚úì GET request successful"
      echo "  Origin IP: {{ $getResponse.origin }}"
      echo "  User-Agent: {{ index $getResponse.headers "User-Agent" }}"
      
      {{ info "Testing POST request with JSON..." }}
      {{ $postData := dict 
           "name" (env "DEMO_NAME")
           "version" (env "DEMO_VERSION")
           "timestamp" (now "2006-01-02T15:04:05Z07:00")
      }}
      
      {{ $postResponse := httpPost "https://httpbin.org/post" $postData }}
      {{ info "‚úì POST request successful" }}
      
      {{ info "Testing custom headers..." }}
      {{ $headerOptions := dict 
           "headers" (dict 
                "X-Custom-Header" "drun-demo"
                "X-Request-ID" (sha256 (now "2006-01-02T15:04:05Z07:00"))
           )
           "url" "/headers"
      }}
      
      {{ $headerResponse := httpCallJSON "httpbin" $headerOptions }}
      {{ info "‚úì Custom headers test successful" }}
      
      {{ success "HTTPBin service tests completed" }}

  # Test different HTTP methods
  test-methods:
    help: "Test different HTTP methods"
    run: |
      {{ step "Testing HTTP methods" }}
      
      {{ info "Testing GET method..." }}
      {{ $getData := httpGet "https://httpbin.org/get" }}
      {{ info "‚úì GET method successful" }}
      
      {{ info "Testing POST method..." }}
      {{ $postData := dict "message" "Hello from drun!" "method" "POST" }}
      {{ $postResult := httpPost "https://httpbin.org/post" $postData }}
      {{ info "‚úì POST method successful" }}
      
      {{ info "Testing PUT method..." }}
      {{ $putData := dict "message" "Updated from drun!" "method" "PUT" }}
      {{ $putResult := httpPut "https://httpbin.org/put" $putData }}
      {{ info "‚úì PUT method successful" }}
      
      {{ info "Testing DELETE method..." }}
      {{ $deleteResult := httpDelete "https://httpbin.org/delete" }}
      {{ info "‚úì DELETE method successful" }}
      
      {{ success "All HTTP methods tested successfully" }}

  # Test with custom options
  test-options:
    help: "Test HTTP requests with custom options"
    run: |
      {{ step "Testing HTTP requests with custom options" }}
      
      {{ info "Testing with custom headers and query parameters..." }}
      
      {{ $options := dict
           "headers" (dict
                "Authorization" "Bearer demo-token"
                "X-API-Version" "v1"
                "X-Client-ID" "drun-demo"
           )
           "query" (dict
                "format" "json"
                "limit" "10"
                "demo" "true"
           )
           "timeout" "15s"
      }}
      
      {{ $response := httpGet "https://httpbin.org/get" $options }}
      {{ info "‚úì Custom options request successful" }}
      
      {{ success "Custom options test completed" }}

  # Test error handling
  test-errors:
    help: "Test error handling scenarios"
    run: |
      {{ step "Testing error handling" }}
      
      {{ warn "Testing 404 error (expected to fail gracefully)..." }}
      {{ $notFound := httpGet "https://httpbin.org/status/404" }}
      {{ if $notFound }}
      {{ warn "Received response for 404 (some APIs return content for errors)" }}
      {{ else }}
      {{ info "‚úì 404 error handled gracefully" }}
      {{ end }}
      
      {{ warn "Testing timeout scenario..." }}
      {{ $timeoutOptions := dict "timeout" "1ms" }}
      {{ $timeoutResult := httpGet "https://httpbin.org/delay/1" $timeoutOptions }}
      {{ if $timeoutResult }}
      {{ warn "Timeout request unexpectedly succeeded" }}
      {{ else }}
      {{ info "‚úì Timeout handled gracefully" }}
      {{ end }}
      
      {{ success "Error handling tests completed" }}

  # Performance test
  test-performance:
    help: "Test HTTP client performance and caching"
    run: |
      {{ step "Testing HTTP client performance" }}
      
      {{ info "Making multiple requests to test caching..." }}
      
      # First request - should hit the server
      {{ $start1 := now "15:04:05.000" }}
      {{ $response1 := httpCallJSON "jsonplaceholder" (dict "url" "/posts/1") }}
      {{ $end1 := now "15:04:05.000" }}
      {{ info (printf "First request completed at %s" $end1) }}
      
      # Second request - should use cache
      {{ $start2 := now "15:04:05.000" }}
      {{ $response2 := httpCallJSON "jsonplaceholder" (dict "url" "/posts/1") }}
      {{ $end2 := now "15:04:05.000" }}
      {{ info (printf "Second request completed at %s" $end2) }}
      
      {{ info "Second request should be faster due to caching" }}
      
      # Multiple requests
      {{ range $i := until 3 }}
      {{ $response := httpCallJSON "jsonplaceholder" (dict "url" (printf "/posts/%d" (add $i 2))) }}
      {{ info (printf "Request %d: Post '%s'" (add $i 1) $response.title) }}
      {{ end }}
      
      {{ success "Performance tests completed" }}

  # Comprehensive demo
  demo:
    help: "Run a comprehensive demo of all HTTP capabilities"
    run: |
      {{ step "üåê drun HTTP Client Comprehensive Demo" }}
      
      {{ info "This demo showcases drun's powerful HTTP client capabilities" }}
      {{ info "Using JSONPlaceholder and HTTPBin for reliable testing" }}
      
      echo ""
      echo "üöÄ Features demonstrated:"
      echo "  ‚úì Predefined HTTP endpoints with configuration"
      echo "  ‚úì Multiple HTTP methods (GET, POST, PUT, DELETE)"
      echo "  ‚úì JSON parsing and response handling"
      echo "  ‚úì Custom headers and query parameters"
      echo "  ‚úì Request/response caching"
      echo "  ‚úì Retry mechanisms with exponential backoff"
      echo "  ‚úì Error handling and timeouts"
      echo "  ‚úì Direct HTTP calls without predefined endpoints"
      echo ""
      
      {{ info "Running basic API tests..." }}
      ../bin/drun-test -f http-api-demo.yml test-jsonplaceholder
      
      echo ""
      {{ info "Running HTTP method tests..." }}
      ../bin/drun-test -f http-api-demo.yml test-methods
      
      echo ""
      {{ info "Running performance tests..." }}
      ../bin/drun-test -f http-api-demo.yml test-performance
      
      echo ""
      {{ success "üéâ HTTP Client Demo completed successfully!" }}
      {{ info "Try running individual tests with: ../bin/drun-test -f http-api-demo.yml <test-name>" }}
      {{ info "Available tests: test-jsonplaceholder, test-httpbin, test-methods, test-options, test-errors" }}

  # List available endpoints
  endpoints:
    help: "List all available API endpoints"
    run: |
      {{ step "Available API Endpoints" }}
      
      echo "üì° JSONPlaceholder API:"
      echo "  ‚Ä¢ https://jsonplaceholder.typicode.com/posts - Sample posts"
      echo "  ‚Ä¢ https://jsonplaceholder.typicode.com/users - Sample users"
      echo "  ‚Ä¢ https://jsonplaceholder.typicode.com/comments - Sample comments"
      echo "  ‚Ä¢ https://jsonplaceholder.typicode.com/albums - Sample albums"
      echo ""
      echo "üîß HTTPBin Service:"
      echo "  ‚Ä¢ https://httpbin.org/get - GET request testing"
      echo "  ‚Ä¢ https://httpbin.org/post - POST request testing"
      echo "  ‚Ä¢ https://httpbin.org/put - PUT request testing"
      echo "  ‚Ä¢ https://httpbin.org/delete - DELETE request testing"
      echo "  ‚Ä¢ https://httpbin.org/headers - Header inspection"
      echo "  ‚Ä¢ https://httpbin.org/status/404 - Error testing"
      echo ""
      echo "üåê Service Info:"
      echo "  ‚Ä¢ JSONPlaceholder: Free fake REST API for testing"
      echo "  ‚Ä¢ HTTPBin: HTTP request & response service"
      echo "  ‚Ä¢ Both services are reliable and free to use"
      echo ""
      
      {{ success "Endpoint information displayed" }}

  # Real-world example
  blog-workflow:
    help: "Real-world example: Blog content workflow"
    run: |
      {{ step "Blog Content Workflow Demo" }}
      
      {{ info "Simulating a blog content management workflow..." }}
      
      # Get latest posts
      {{ $posts := httpCallJSON "jsonplaceholder" (dict "url" "/posts" "query" (dict "limit" "5")) }}
      {{ info (printf "Found %d posts" (len $posts)) }}
      
      # Process each post
      {{ range $post := $posts | first 3 }}
      echo ""
      echo "üìÑ Processing Post #{{ $post.id }}"
      echo "   Title: {{ $post.title }}"
      
      # Get author information
      {{ $author := httpCallJSON "jsonplaceholder" (dict "url" (printf "/users/%d" $post.userId)) }}
      echo "   Author: {{ $author.name }} ({{ $author.email }})"
      
      # Get comments count
      {{ $comments := httpCallJSON "jsonplaceholder" (dict "url" (printf "/posts/%d/comments" $post.id)) }}
      echo "   Comments: {{ len $comments }}"
      
      # Simulate content processing
      echo "   Status: ‚úÖ Processed"
      {{ end }}
      
      {{ success "Blog workflow completed" }}
